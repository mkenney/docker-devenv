#!/bin/bash

COMMAND=$(basename ${0})
COMMAND_PATH=$0
CONTAINER_SUFFIX=.devenv
CONTAINER_IMAGE='mkenney/devenv'

##############################################################################
# Define all functions
##############################################################################

# Show the help screen
function _devenv_show_usage {
    echo "
 Usage: ${COMMAND} [options] [commands]

    Options:
        -h, -?                      Show usage
        --help, help                Show extended help
        -d, --daemonize             Continue running the container after
                                    detaching
        -p PATH, --path=PATH        Specify the project path
        -t TARGET, --target=TARGET  Specify a target environment name
        --tmux, --tmux=PATH         Specify a tmux configuration file. If 
                                    path is omitted from this option then 
                                    $HOME/.tmux.conf is assumed
        --vimrc, --vimrc=PATH       Specify a vim configuration file. If 
                                    path is omitted from this option then 
                                    $HOME/.vimrc is assumed

    Commands:
        attach [TARGET]             Attach to a running environment
        init [TARGET] [PATH]        Create a new environment
        kill [TARGET]               Stop a running environment and clean up
        ls [PATTERN]                List available environments
        pause [TARGET]              Pause a running environment
        restart [TARGET]            Kill and re-initialize an environment
        rename [TARGET] NEW_NAME    Rename an environment
        self-update                 Update to the latest docker image
        unpause [TARGET]            Start a paused environment

 Michael Kenney <mkenney@webbedlam.com>
"
    exit 1
}

# Show the help screen
function _devenv_show_help {
    echo "
 NAME
     ${COMMAND} -- Manage ${CONTAINER_IMAGE} docker work environment containers

 SYNOPSYS
     ${COMMAND} [-t TARGET] [-p PATH] [-d] [command]

 DESCRIPTION
     The ${COMMAND} utility is used to manage ${CONTAINER_IMAGE} docker containers to
     create a consistent bash-based shell environment. To detach from an
     instance, simply detach from the 'tmux' session (':detach')

 OPTIONS
     Command modifiers and alternate data inputs. Most commands take their
     own arguments.

         -h, -?
             Show the command usage screen

         --help, help
             Show this extended help screen

         -d, --daemonize
             Used when attaching to an instance. If specified, allow the
             instance to continue running after detaching from the session,
             otherwise the container will be paused automatically.

             This is useful executing a long-running script to come back to
             or starting a daemon. If you forget to daemonize an instance,
             you can start it with the 'unpause' command after you detach.

         -p PATH, --path=PATH
             Specify the project path, this directory is mounted into /src
             inside the container. If omitted, the project path is set to
             the current directory.

         -t TARGET, --target=TARGET
             Specify an instance name. If omitted, current instances will be
             searched to see if any are attached to the project path. If none
             are found, TARGET is set to the basename of the project path.

         --tmux, --tmux=PATH
             Specify a tmux configuration file. If PATH is omitted then
             $HOME/.tmux.conf will be assumed. If the --tmux option
             is omitted then the .tmux.conf file from the docker image will
             be used.

         --vimrc, --vimrc=PATH
             Specify a vim configuration file. If PATH is omitted then
             $HOME/.vimrc will be assumed. If the --vimrc option is 
             omitted then the .vimrc file from the docker image will be used.
             
             In addition, this script will attempt to mount a .vim/ folder
             from the same location as the .vimrc file.

 COMMANDS
     Available commands ${COMMAND} can execute. TARGET refers to the name of
     the instance you are managing and PATH refers to the mounted working
     directory. If PATH is omitted, it defaults to the current directory.

     If TARGET is omitted, current instances are searched to see if any are
     attached to the specified PATH, and if so, TARGET is set to the instance
     name. If not, TARGET defaults to the basename of the PATH value.

         attach [TARGET]
             Attach to an instance specified by the [TARGET] argument.

             EXAMPLES
                 ${COMMAND} attach [TARGET]
                 ${COMMAND} -t TARGET attach
                 ${COMMAND} -p PATH attach

         init [TARGET] [PATH]
             Create a new instance.

             EXAMPLES
                 ${COMMAND} create [TARGET] [PATH]
                 ${COMMAND} -p PATH create [TARGET]
                 ${COMMAND} -t TARGET create [PATH]
                 ${COMMAND} -t TARGET -p PATH create

         kill [TARGET]
             Stop a running instance and clean up.

             EXAMPLES
                 ${COMMAND} kill TARGET
                 ${COMMAND} -t TARGET kill
                 ${COMMAND} -p PATH kill

         ls [pattern]
             List currently running instances, optionally filtering results
             with a glob pattern. If pattern is '-q' (quiet) only instance
             names are returned.

             EXAMPLES
                 ${COMMAND} ls
                 ${COMMAND} ls java*
                 ${COMMAND} ls *-php-v5.?
                 ${COMMAND} ls -q

         pause [TARGET]
             Pause a running instance.

             EXAMPLES
                 ${COMMAND} pause TARGET
                 ${COMMAND} -t TARGET pause
                 ${COMMAND} -p PATH pause

         restart [TARGET]
             Kill and re-create the specified running instance.

             EXAMPLES
                 ${COMMAND} restart TARGET
                 ${COMMAND} -t TARGET restart
                 ${COMMAND} -p PATH restart

         rename [TARGET] NEW_NAME
             Rename a running or stopped instance. 'rename' does not accept a
             PATH argument.

             EXAMPLES
                 ${COMMAND} rename TARGET NEW_NAME
                 ${COMMAND} -t TARGET rename NEW_NAME

         self-update
             Update to the latest 'mkenney/devenv' docker image and '${COMMAND}'
             control script.

             EXAMPLES
                 ${COMMAND} self-update

         unpause [TARGET]
             Start a paused instance.

             EXAMPLES
                 ${COMMAND} unpause TARGET
                 ${COMMAND} -t TARGET unpause
                 ${COMMAND} -p PATH unpause

 TODO
     - Improve error handling and messages

 AUTHORS
     Michael Kenney <mkenney@webbedlam.com>
" | less
    exit 1
}

# Kill a dev container
#
# @param environment name returned by _devenv_list_environments
function _devenv_kill_container {
    if [ "true" == "$(_devenv_is_paused ${1})" ]; then
        _devenv_unpause_container ${1}
    fi
    if [ "true" == "$(_devenv_is_running ${1})" ]; then
        echo "Stopping '${1}'..."
        docker stop ${1}${CONTAINER_SUFFIX} > /dev/null
        echo "Removing '${1}'..."
        docker rm ${1}${CONTAINER_SUFFIX} > /dev/null
    else
        echo "Container '$1' is not running"
    fi
    running='false'
}

# Pause a dev container
#
# @param environment name returned by _devenv_list_environments
function _devenv_pause_container {
    if [ "true" == "$(_devenv_is_running ${1})" ]; then
        echo "Pausing '$1'..."
        docker pause ${1}${CONTAINER_SUFFIX} > /dev/null
    else
        echo "Container '$1' is not running"
    fi
    running='false'
}

# Unpause a dev container
#
# @param environment name returned by _devenv_list_environments
function _devenv_unpause_container {
    if [ "true" == "$(_devenv_is_paused ${1})" ]; then
        echo "Restoring '$1'..."
        docker unpause ${1}${CONTAINER_SUFFIX} > /dev/null
    else
        echo "Container '$1' is not running"
    fi
    running='false'
}

# Start the tmux session
#
# @param environment name returned by _devenv_list_environments
function _devenv_init_session {
    cat /oracle/product/latest/network/admin/tnsnames.ora | docker exec -i ${1}${CONTAINER_SUFFIX} sudo sh -c 'cat > /oracle/product/latest/network/admin/tnsnames.ora'
    docker exec -ti ${1}${CONTAINER_SUFFIX} script /dev/null -c 'sh /init.sh'
}

# Start a dev container
#
# $1 TARGET
# $2 PATH
# $3 .tmux.conf path
#
function _devenv_create_container {
    if [ "true" == "$(_devenv_is_running ${1})" ]; then
        echo "Container '${1}' is already running"
    else

        docker_run_args="
            -itd \
            -h ${1} \
            -e HOSTNAME=${1} \
            -e PROJECT_PATH=/src \
            --add-host docker:127.0.0.1 \
            -e TERM=$TERM \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $HOME/.ssh/:/home/dev/.ssh/:ro \
            -v $HOME/.oracle/:/home/dev/.oracle/:ro \
            -v ${2}:/src:rw \
            -w /src \
            --label project_path=${2} \
            --name ${1}${CONTAINER_SUFFIX}
        ";
        
        # tmux config path
        if [ -f "$3" ]; then
            docker_run_args="$docker_run_args -v $(realpath $3):/home/dev/.tmux.conf:ro"
        fi
        # vimrc config path
        if [ -f "$4" ]; then
            docker_run_args="$docker_run_args -v $(realpath $4):/home/dev/$(basename $4):ro"
            docker_run_args="$docker_run_args -v $(dirname $(realpath $4))/.vim/:/home/dev/.vim/:ro"
        fi

        echo "Starting dev container '${1}' at ${2}..."
        echo "docker run $docker_run_args ${CONTAINER_IMAGE}"
        docker run $docker_run_args ${CONTAINER_IMAGE}

        _devenv_init_session ${1}
    fi
}

function _devenv_get_path_from_container {
    local container_name project_path
    container_name=${1}
    project_path=$(docker inspect -f "{{json .Config.Labels.project_path }}" ${container_name}${CONTAINER_SUFFIX})
    project_path=${project_path/\"/}
    echo ${project_path%\"}
}

# Attach to a dev environment
#
# @param environment name returned by _devenv_list_environments
function _devenv_attach {
    if [ -n "$TMUX" ]; then
        _devenv_error_in_tmux
    fi
    docker exec -ti ${1}${CONTAINER_SUFFIX} script /dev/null -c 'sh /attach.sh'
}

# Rename a dev environment
#
# @param environment name returned by _devenv_list_environments
function _devenv_rename_container {
    docker rename ${1}${CONTAINER_SUFFIX} ${2}${CONTAINER_SUFFIX}
}

# Pull the latest image
#
# @todo This should update this script also
function _devenv_self_update {
    wget -nv -O $COMMAND_PATH https://raw.githubusercontent.com/mkenney/docker-devenv/master/bin/devenv
    docker pull $CONTAINER_IMAGE
}

# Check to see if a named environment is running
#
# @param environment name returned by _devenv_list_environments
function _devenv_is_running {
    running='true'
    container_name="${1}${CONTAINER_SUFFIX}"
    # Container state
    running=$(docker inspect --format="{{ .State.Running }}" ${container_name} 2> /dev/null)
    if [ $? -eq 1 ]; then
        running='false'
    fi
    ghost=$(docker inspect --format="{{ .State.Ghost }}" ${container_name} 2> /dev/null)
    paused=$(docker inspect --format="{{ .State.Paused }}" ${container_name} 2> /dev/null)
    exited=$(docker ps -a -f "status=exited" | grep "${container_name}")

    if [ "" != "${exited}" ]; then
        running='false'
    fi
    if [ "true" == "${ghost}" ]; then
        running='false'
    fi
    if [ "true" == "${paused}" ]; then
        running='true'
    fi

    echo ${running}
}

# Check to see if a named environment is paused
#
# @param environment name returned by _devenv_list_environments
function _devenv_is_paused {
    container_name="${1}${CONTAINER_SUFFIX}"
    paused='false'
    if [ "true" == "$(_devenv_is_running ${1})" ] && [ "true" == "$(docker inspect --format="{{ .State.Paused }}" ${container_name})" ]; then
        paused='true'
    fi
    echo ${paused}
}

# List current environments
function _devenv_list_environments {

    quiet='false'
    if [ "-q" == "$1" ]; then
        quiet='true'
        shift
    fi

    # Stopped environments
    if [ "" != "$(docker ps -a -f "status=exited" | grep -e "$CONTAINER_SUFFIX\$")" ]; then
        for a in $(docker inspect --format='{{.Name}}' $(docker ps -q --no-trunc) | grep -e "$CONTAINER_SUFFIX\$"); do
            name=${a:1:${#a}-1}
            name=${name%$CONTAINER_SUFFIX}
            path=$(_devenv_get_path_from_container $name)
            if [ "" == "${1}" ] || [[ "$name" == $1 ]]; then
                if [ "true" == "$quiet" ]; then
                    echo $name
                else
                    echo " stopped: ${name} @ ${path}"
                fi
            fi
        done
    fi

    # Running environments
    local name
    if [ "" != "$(docker ps | grep -e "$CONTAINER_SUFFIX\$")" ]; then
        for a in $(docker inspect --format='{{.Name}}' $(docker ps -q --no-trunc) | grep -e "$CONTAINER_SUFFIX\$"); do
            name=${a:1:${#a}-1}
            name=${name%$CONTAINER_SUFFIX}
            path=$(_devenv_get_path_from_container $name)
            if [ "" == "${1}" ] || [[ "$name" == $1 ]]; then
                if [ "true" == "$(_devenv_is_paused ${name%$CONTAINER_SUFFIX})" ]; then
                    if [ "true" == "$quiet" ]; then
                        echo $name
                    else
                        echo " paused:  ${name} @ ${path}"
                    fi
                else
                    if [ "true" == "$quiet" ]; then
                        echo $name
                    else
                        echo " running: ${name} @ ${path}"
                    fi
                fi
            fi
        done
    fi

    exit 0
}

function _devenv_get_target_from_path {
    for name in $(_devenv_list_environments -q); do
        path=$(_devenv_get_path_from_container $name)
        if [ "$path" == "$1" ]; then
            echo $name;
            exit 0;
        fi
    done
}

#
function _devenv_error_in_tmux {
    echo ""
    echo "This shell is currently running in a Tmux session and attaching to"
    echo "a 'devenv' environment will launch a new Tmux session. Sessions"
    echo "should be nested with care, unset \$TMUX to force."
    exit 1
}

# Display error message
function _devenv_error_notarget {
    echo ""
    echo "The target enviroment must be specified with the '-t' option. Available"
    echo "envirnments can be listed with the 'ls' command: 'devenv ls'"
    exit 1
}

# Display error message
function _devenv_error_nopath {
    echo ""
    echo "The target enviroment must be specified with the '-t' option. Available"
    echo "envirnments can be listed with the 'ls' command: 'devenv ls'"
    exit 1
}

# Display error message
function _devenv_error_target_not_running {
    echo ""
    echo "The specified enviroment '${1}' does not exist, try creating it with"
    echo "'devenv init ${1} [PATH]'"
    exit 1
}

# Display error message
function _devenv_error_target_exists_stopped {
    echo ""
    echo "The specified enviroment already exists, try starting it with"
    echo "'devenv start [-t environment_name]'"
    exit 1
}

# Display error message
function _devenv_error_target_exists_running {
    echo ""
    echo "The specified enviroment already exists, try attaching to it with"
    echo "'devenv attach [-t environment_name]'"
    exit 1
}

# Display error message
function _devenv_error_target_does_not_exist {
    echo ""
    echo "The specified enviroment does not exist, try creating it with"
    echo "'devenv create [-t environment_name] [-p environment_path]'"
    exit 1
}

# Display error message
function _devenv_error_new_name_not_specified {
    echo ""
    echo "You must specify a new name to rename an environment:"
    Tcho "'devenv rename -t oldname newname'"
    exit 1
}

# Display error message
function _devenv_error_not_a_directory {
    echo ""
    echo "The specified path '${1}' does not exist"
    exit 1
}

#
function _devenv_error_file_not_found {
    echo "
The file '$1' does not exist
"
    exit 1
}

##############################################################################
# Parse command options
##############################################################################

_devenv_path=""
_devenv_target=""
_devenv_daemonize="false"

while :; do
    case $1 in
        #
        # help screen
        #
        -h|-\?)
            _devenv_show_usage
            ;;
        --help|help)
            _devenv_show_help
            ;;
        #
        # continue running when detaching, otherwise pause
        #
        -d|--daemonize)
            _devenv_daemonize="true"
            ;;
        #
        # project path
        #
        -p)
            if [ -n "$2" ]; then
                _devenv_path=$2
                shift
            else
                _devenv_show_help
            fi
            ;;
        --path=?*)
            _devenv_path=${1#*=}
            ;;
        --path|--path=)
            _devenv_show_help
            ;;
        #
        # target session
        #
        -t)
            if [ -n "$2" ]; then
                _devenv_target=$2
                shift
            else
                _devenv_show_help
            fi
            ;;
        --target=?*)
            _devenv_target=${1#*=}
            ;;
        --target|--target=)
            _devenv_show_help
            ;;
        #
        # .tmux.conf path
        #
        --tmux=?*)
            if [ -f ${1#*=} ]; then
                _tmux_conf_path=$(realpath ${1#*=})
            else
                _devenv_error_file_not_found ${1#*=}
            fi
            ;;
        --tmux)
            if [ -f "$HOME/.tmux.conf" ]; then
                _tmux_conf_path=$HOME
            else
                _devenv_error_file_not_found "$HOME/.tmux.conf"
            fi
            ;;
        #
        # .vimrc path
        #
        --vimrc=?*)
            if [ -f ${1#*=} ]; then
                _vimrc_conf_path=$(realpath ${1#*=})
            else
                _devenv_error_file_not_found ${1#*=}
            fi
            ;;
        --vimrc)
            if [ -f "$HOME/.vimrc" ]; then
                _vimrc_conf_path=$HOME
            else
                _devenv_error_file_not_found "$HOME/.vimrc"
            fi
            ;;
        #
        # Attach to a running container
        #
        attach)
            _devenv_command=$1
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                shift
            fi
            ;;
        #
        # Initialize a new container
        #
        create|init)
            _devenv_command=$1
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                shift
            fi
            if [ "" == "$_devenv_path" ]; then
                _devenv_path=$2
                shift
            fi
            ;;
        #
        # Kill a current container
        #
        kill)
            _devenv_command=$1
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                shift
            fi
            ;;
        ls)
            _devenv_command=$1
            _devenv_secondary_command=$2
            shift
            ;;
        #
        # Restart a running container
        #
        refresh|reload|restart)
            _devenv_command='restart'
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                shift
            fi
            ;;
        #
        # rename session
        #
        rename)
            _devenv_command=$1
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                shift
            fi
            if [ -n  "$2" ]; then
                _devenv_secondary_command=$2
                shift
            else
                _devenv_show_usage
            fi
            ;;
        self-update)
            _devenv_command=$1
           ;;
        start|unpause)
            _devenv_command='start'
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                shift
            fi
            ;;
        stop|pause)
            _devenv_command='stop'
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                shift
            fi
            ;;
        *)
            break
    esac

    shift
done

if [[ $@ ]]; then
    _devenv_show_usage
fi

##############################################################################
# Init script variables
##############################################################################

# Setup the project path, default to the current directory
if [ "" == "${_devenv_path}" ]; then
    _devenv_path='.'
fi
if [ ! -d "$_devenv_path" ]; then
    _devenv_error_not_a_directory $_devenv_path
fi
_devenv_project_path=$(realpath "${_devenv_path}")

# Setup the container name. If the project path is associated with a current
# container, use that container's name, otherwise default to the basename of
# the project path
if [ "" == "${_devenv_target}" ]; then
    _tmp=$(_devenv_get_target_from_path $_devenv_project_path);
    if [ "" != "$_tmp" ]; then
        _devenv_container_name=$_tmp
    else
        _devenv_container_name=$(basename $_devenv_project_path)
    fi
else
    _devenv_container_name=${_devenv_target}

    # If the environment name is specified and it is running, override the
    # project path with the label from the container
    if [ "false" != "$(_devenv_is_running ${_devenv_container_name})" ]; then
        _devenv_project_path=$(_devenv_get_path_from_container ${_devenv_container_name})
    fi
fi

# Flag noting whether the environment specified by _devenv_container_name exists
_devenv_target_exists='false'
if [ "" != "$(_devenv_list_environments | grep '^${_devenv_container_name}')" ]; then
    _devenv_target_exists='true'
fi

# Default command
if [ "" == "${_devenv_command}" ]; then
    _devenv_command='attach'
fi

# Conf path arguments
if [ "" == "${_tmux_conf_path}" ]; then
    _tmux_conf_path='-'
fi
if [ "" == "${_vimrc_conf_path}" ]; then
    _vimrc_conf_path='-'
fi

##############################################################################
# Execute
##############################################################################

# Attach to a running container
if [ "attach" == "${_devenv_command}" ]; then
    if [ "false" == "$(_devenv_is_running ${_devenv_container_name})" ]; then
        _devenv_error_target_not_running $_devenv_container_name
    fi
    if [ "true" == "$(_devenv_is_paused ${_devenv_container_name})" ]; then
        _devenv_unpause_container ${_devenv_container_name}
    fi
    _devenv_attach ${_devenv_container_name}
    if [ "true" != "${_devenv_daemonize}" ]; then
        _devenv_pause_container ${_devenv_container_name}
    fi


# Create and start a new container
elif [ "init" == "${_devenv_command}" ]; then
    if [ "true" == "${_devenv_target_exists}" ] && [ "false" == "$(_devenv_is_running ${_devenv_container_name})" ]; then
        _devenv_error_target_exists_stopped
    elif [ "true" == "$(_devenv_is_running ${_devenv_container_name})" ]; then
        _devenv_error_target_exists_running
    fi
    _devenv_create_container ${_devenv_container_name} ${_devenv_project_path} ${_tmux_conf_path} ${_vimrc_conf_path}


# Kill a running container
elif [ "kill" == "${_devenv_command}" ]; then
    _devenv_kill_container ${_devenv_container_name}


# List current containers
elif [ "ls" == "${_devenv_command}" ]; then
    _devenv_list_environments ${_devenv_secondary_command}


# Refresh the specified container
elif [ "refresh" == "${_devenv_command}" ] || [ "restart" == "${_devenv_command}" ]; then
    if [ "false" == "$(_devenv_is_running ${_devenv_container_name})" ]; then
        _devenv_error_target_not_running ${_devenv_container_name}
    fi
    _devenv_kill_container ${_devenv_container_name}
    _devenv_create_container ${_devenv_container_name} ${_devenv_project_path} ${_tmux_conf_path} ${_vimrc_conf_path}


# Rename a current container
elif [ "rename" == "${_devenv_command}" ]; then
    if [ "" == "${_devenv_secondary_command}" ]; then
        _devenv_error_new_name_not_specified
    fi
    if [ "false" == "${_devenv_target_exists})" ]; then
        _devenv_error_target_does_not_exist
    fi
    _devenv_rename_container ${_devenv_container_name} ${_devenv_secondary_command}


# Update to the latest image
# @todo Update this script from github too...
elif [ "self-update" == "${_devenv_command}" ]; then
    _devenv_self_update


# Unpause a paused container
elif [ "start" == "${_devenv_command}" ]; then
    _devenv_unpause_container ${_devenv_container_name}
    _devenv_attach ${_devenv_container_name}
    if [ "true" != "${_devenv_daemonize}" ]; then
        _devenv_pause_container ${_devenv_container_name}
    fi


# Pause a running container
elif [ "stop" == "${_devenv_command}" ]; then
    _devenv_pause_container ${_devenv_container_name}


# Unknown command
else
    echo " Unknown command '${_devenv_command}'"
    echo ""
    _devenv_show_usage
fi

exit 0
