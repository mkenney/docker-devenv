#!/bin/bash

##############################################################################
# The MIT License (MIT)
#
# Copyright (c) 2016 Michael Kenney
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
##############################################################################

COMMAND=$(basename ${0})
COMMAND_PATH=$0
CONTAINER_SUFFIX=.devenv
CONTAINER_IMAGE='mkenney/devenv'

##############################################################################
# Define all functions
##############################################################################

# Show the help screen
function _devenv_show_usage {
    echo "
 Usage: ${COMMAND} [options] [commands]

    Options:
        -h, -?                      Show usage
        --help, help                Show extended help
        --ctags-exclude             Specify files or directories to exclude when
                                    compiling the tags file.
        -d, --daemonize             Continue running the container after
                                    detaching
        -p PATH, --path=PATH        Specify the project path
        -t TARGET, --target=TARGET  Specify a target environment name
        --tmux, --tmux=PATH         Specify a tmux configuration file. If path
                                    is omitted from this option then
                                    $HOME/.tmux.conf is assumed
        --tmux-prefix=PREFIX        Use the default tmux configuration file
                                    but specify you're preferred prefix key.
                                    The default key is 'M-space'
        --vimrc, --vimrc=PATH       Specify a vim configuration file. If
                                    path is omitted from this option then
                                    $HOME/.vimrc is assumed
        -v PATH, --volume=PATH      Specify additional volumes to bind mount
                                    into the container.

    Commands:
        attach [TARGET]             Attach to a running environment
        build-tags [TARGET]         Trigger an update to project tags file
        init [TARGET] [PATH]        Create a new environment
        kill [TARGET]               Stop a running environment and clean up
        ls [PATTERN]                List available environments
        pause [TARGET]              Pause a running environment
        restart [TARGET]            Kill and re-initialize an environment
        rename [TARGET] NEW_NAME    Rename an environment
        self-update                 Update to the latest docker image
        unpause [TARGET]            Start a paused environment

 Michael Kenney <mkenney@webbedlam.com>
"
    exit 1
}

# Show the help screen
function _devenv_show_help {
    echo "
 NAME
     ${COMMAND} -- Manage ${CONTAINER_IMAGE} docker work environment containers

 SYNOPSYS
     ${COMMAND} [-t TARGET] [-p PATH] [-d] [command] [command-args]

 DESCRIPTION
     The ${COMMAND} utility is used to manage ${CONTAINER_IMAGE} docker containers
     to create a consistent bash-based shell environment. To detach from an
     instance, simply detach from the 'tmux' session (':detach')

 OPTIONS
     Command modifiers and alternate data inputs. Most commands take their
     own arguments.

         -h, -?
             Show the command usage screen

         --help, help
             Show this extended help screen

         --ctags-exclude
             Used to specify files or directories that should be excluded when
             compiling the tags file. The value can be either a comma-separated
             list of glob patterns or this option can be specified multiple
             times. The tags file is compiled when first attaching to an
             instance.

         -d, --daemonize
             Used when initializing or restarting an instance. If specified,
             allow the instance to continue running after detaching from the
             session, otherwise the container will be paused automatically.

             This is useful executing a long-running script to come back to or
             starting a daemon. If you forget to daemonize an instance, you can
             start it with the 'unpause' command after you detach.

         -p PATH, --path=PATH
             Specify the project path, this directory is mounted into /src
             inside the container. If omitted, the project path is set to the
             current directory.

         -t TARGET, --target=TARGET
             Specify an instance name. If omitted, current instances will be
             searched to see if any are attached to the project path. If none
             are found, TARGET is set to the basename of the project path.

         --tmux, --tmux=PATH
             Specify a tmux configuration file. If PATH is omitted then
             $HOME/.tmux.conf will be assumed. If the --tmux option is omitted
             then the .tmux.conf file from the docker image will be used.

         --tmux-prefix=PREFIX
             The default prefix key has been set to M-space (meta+space) to keep
             it from interfering with the default vim 'PageUp' bindings or
             common user configurations. You can specify your preferred prefix
             binding when initializing an instance  with this option. For
             example, to restore the default tmux prefix binding use
             '--tmux-prefix=C-b' when initializing a new instance.

         --vimrc, --vimrc=PATH
             Specify a vim configuration file. If PATH is omitted then
             $HOME/.vimrc will be assumed. If the --vimrc option is omitted
             entirely then the default .vimrc file included with the docker
             image will be used. In addition, this script will attempt to mount
             a .vim/ folder from the same location as the .vimrc file.

         -v PATH, --volume=PATH
             Specify additional volumes to bind mount into the container.

 COMMANDS
     Available commands '${COMMAND}' can execute. Most commands accept the
     optional TARGET or PATH arguments. TARGET refers to the name of the
     instance you are manipulating and PATH refers to the working directory that
     gets mounted into the /src directory in the instance.

     If PATH is omitted, it defaults to the current directory. If TARGET is
     omitted, current instances are searched to see if any are attached to PATH,
     and if so, TARGET is set to that instance name. If not, TARGET defaults to
     the basename of the PATH value.

     If TARGET is specified but PATH is omitted, the reverse behavior happens
     and current instances are searced for one named TARGET. If one is found,
     PATH is set to the path the TARGET instance is attached to, otherwise the
     default again becomes the current directory.

     Both TARGET and PATH can be specified using the optional arguments --target
     and --path respectively.

         attach [TARGET]
             Attach to an instance specified by the [TARGET] argument.

             EXAMPLES
                 ${COMMAND} attach TARGET
                 ${COMMAND} -t TARGET attach
                 ${COMMAND} -p PATH attach

         build-tags [TARGET]
             Update the project ctags file.

             EXAMPLES
                 ${COMMAND} build-tags TARGET
                 ${COMMAND} -t TARGET build-tags
                 ${COMMAND} -p PATH build-tags

         init [TARGET] [PATH]
             Create a new instance.

             EXAMPLES
                 ${COMMAND} init TARGET PATH
                 ${COMMAND} -p PATH create TARGET
                 ${COMMAND} -t TARGET create PATH
                 ${COMMAND} -t TARGET -p PATH create

         kill [TARGET]
             Stop a running instance and clean up.

             EXAMPLES
                 ${COMMAND} kill TARGET
                 ${COMMAND} -t TARGET kill
                 ${COMMAND} -p PATH kill

         ls [pattern]
             List currently running instances, optionally filtering results with
             a glob pattern. If pattern is '-q' (quiet) only instance names are
             returned.

             EXAMPLES
                 ${COMMAND} ls
                 ${COMMAND} ls java*
                 ${COMMAND} ls *-php-v5.?
                 ${COMMAND} ls -q

         pause [TARGET]
             Pause a running instance.

             EXAMPLES
                 ${COMMAND} pause TARGET
                 ${COMMAND} -t TARGET pause
                 ${COMMAND} -p PATH pause

         restart [TARGET]
             Kill and re-create the specified running instance.

             EXAMPLES
                 ${COMMAND} restart TARGET
                 ${COMMAND} -t TARGET restart
                 ${COMMAND} -p PATH restart

         rename [TARGET] NEW_NAME
             Rename a running or stopped instance. 'rename' does not accept a
             PATH argument.

             EXAMPLES
                 ${COMMAND} rename TARGET NEW_NAME
                 ${COMMAND} -t TARGET rename NEW_NAME

         self-update
             Update to the latest 'mkenney/devenv' docker image and '${COMMAND}'
             control script.

             EXAMPLES
                 ${COMMAND} self-update

         unpause [TARGET]
             Start a paused instance.

             EXAMPLES
                 ${COMMAND} unpause TARGET
                 ${COMMAND} -t TARGET unpause
                 ${COMMAND} -p PATH unpause

 TODO
     - Improve error handling and messages

 AUTHORS
     Michael Kenney <mkenney@webbedlam.com>
" | less
    exit 0
}

# Kill a dev container
#
# @param environment name returned by _devenv_list_environments
function _devenv_kill_container {
    if [ "true" == "$(_devenv_is_paused ${1})" ]; then
        _devenv_unpause_container ${1}
    fi
    if [ "true" == "$(_devenv_is_running ${1})" ]; then
        echo "Stopping '${1}'..."
        docker stop ${1}${CONTAINER_SUFFIX} > /dev/null
    fi
    echo "Removing '${1}'..."
    docker rm ${1}${CONTAINER_SUFFIX} > /dev/null
    running='false'
}

# Pause a dev container
#
# @param environment name returned by _devenv_list_environments
function _devenv_pause_container {
    if [ "true" == "$(_devenv_is_running ${1})" ]; then
        echo "Pausing '$1'..."
        docker pause ${1}${CONTAINER_SUFFIX} > /dev/null
    else
        echo "Container '$1' is not running"
    fi
    running='false'
}

# Unpause a dev container
#
# @param environment name returned by _devenv_list_environments
function _devenv_unpause_container {
    if [ "true" == "$(_devenv_is_paused ${1})" ]; then
        echo "Restoring '$1'..."
        docker unpause ${1}${CONTAINER_SUFFIX} > /dev/null
    else
        echo "Container '$1' is not running"
    fi
    running='false'
}

# Start the tmux session
#
# @param environment name returned by _devenv_list_environments
function _devenv_init_session {
    if [ -f "/oracle/product/latest/network/admin/tnsnames.ora" ]; then
        cat /oracle/product/latest/network/admin/tnsnames.ora | docker exec -i ${1}${CONTAINER_SUFFIX} sudo sh -c 'cat > /oracle/product/latest/network/admin/tnsnames.ora'
    else
        echo "No tnsnames.ora file found on host."
    fi
    docker exec -ti ${1}${CONTAINER_SUFFIX} script /dev/null -c 'sh /init.sh'
}

# Buld tags
#
# @param environment name returned by _devenv_list_environments
function _devenv_build_tags {
    docker exec -ti ${1}${CONTAINER_SUFFIX} script /dev/null -c 'sh /build-tags.sh'
}

# Start a dev container
#
# $1 TARGET
# $2 PATH
# $3 .tmux.conf path
# $4 .vimrc path
# $5 Daemonize flag
# $6 ctags excludes, comma-separated string
# $7 Custom tmux prefix string, i.e. 'C-b'
# $7 List of volume mount strings
#
function _devenv_create_container {

    local _target=$1
    local _path=$2
    local _tmux_conf=$3
    local _vimrc=$4
    local _daemonize=$5
    local _ctags_excludes=$6
    local _tmux_prefix=$7
    local _additional_volumes="$8"

    if [ "true" == "$(_devenv_is_running ${_target})" ]; then
        echo "Container '${_target}' is already running"
    else

        #--storage-opt=\"dm.no_warn_on_loop_devices=true\" \
        docker_run_args="
            -itd \
            -e IS_DEVENV=true
            -h $_target \
            -e HOSTNAME=$_target \
            -e POWERLINE_HOST_HOSTNAME=$(hostname) \
            -e PROJECT_PATH=/src \
            --add-host docker:127.0.0.1 \
            -e TERM=$TERM \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v $_path:/src:rw \
            -w /src \
            --label project_path=$_path \
            --name $_target$CONTAINER_SUFFIX
        ";

        # Mount the .ssh/ directory
        if [ -d "$HOME/.ssh" ]; then
            docker_run_args="$docker_run_args -v $HOME/.ssh/:/home/dev/.ssh/:ro"
        fi
        # Mount the .kube/ directory
        if [ -d "$HOME/.kube" ]; then
            docker_run_args="$docker_run_args -v $HOME/.kube/:/home/dev/.kube/:ro"
        fi
        # Mount the .aws/ directory
        if [ -d "$HOME/.aws" ]; then
            docker_run_args="$docker_run_args -v $HOME/.aws/:/home/dev/.aws/:ro"
        fi
        # Mount the .oracle/ directory
        if [ -d "$HOME/.oracle" ]; then
            docker_run_args="$docker_run_args -v $HOME/.oracle/:/home/dev/.oracle/:ro"
        fi
#        # Include the .gitconfig
#        if [ -f "$HOME/.gitconfig" ]; then
#            docker_run_args="$docker_run_args -v $HOME/.gitconfig:/home/dev/.gitconfig:ro"
#        fi
#        # Include the .gitignore_global
#        if [ -f "$HOME/.gitignore_global" ]; then
#            docker_run_args="$docker_run_args -v $HOME/.gitconfig:/home/dev/.gitignore_global:ro"
#        fi
        # tmux config path
        if [ -f "$_tmux_conf" ]; then
            docker_run_args="$docker_run_args -v $(realpath $_tmux_conf):/home/dev/.tmux.conf:ro"
        fi
        # vim resources
        if [ -f "$_vimrc" ]; then
            docker_run_args="$docker_run_args -v $(realpath $_vimrc):/home/dev/$(basename $_vimrc):ro"
            docker_run_args="$docker_run_args -v $(dirname $(realpath $_vimrc))/.vim/undodir:/home/dev/.vim/undodir:rw"
        else
            docker_run_args="$docker_run_args -v $HOME/.vim/undodir:/home/dev/.vim/undodir:rw"
            docker_run_args="$docker_run_args -v $HOME/.vim/data:/home/dev/.vim/data:rw"
        fi
        # daemonize
        if [ "true" == "$_daemonize" ]; then
            docker_run_args="$docker_run_args --label daemonize=${_daemonize}"
        fi
        # ctags excludes
        if [ "-" != "$_ctags_excludes" ]; then
            docker_run_args="$docker_run_args -e CTAGS_EXCLUDES=$_ctags_excludes"
        fi
        # custom tmux prefix key
        if [ "-" != "$_tmux_prefix" ]; then
            docker_run_args="$docker_run_args -e TMUX_PREFIX=$_tmux_prefix"
        fi
        # additional volumes
        if [ "-" != "$_additional_volumes" ]; then
            IFS=',' read -r -a volumes <<< "$_additional_volumes"
            for volume in "${volumes[@]}"; do
                docker_run_args="$docker_run_args -v $volume"
            done
        fi

        echo "Starting dev container '${_target}' at ${_path}..."

        docker network create devenv 2> /dev/null

        docker run --network=devenv --privileged --cap-add=MKNOD --cap-add=CAP_SYS_ADMIN --device=/dev/fuse $docker_run_args ${CONTAINER_IMAGE}

        _devenv_init_session ${_target}
        _devenv_build_tags ${_target}
        if [ "true" != "$_daemonize" ]; then
            _devenv_pause_container ${_target}
        else
            echo "Running '$_target' as a daemon"
        fi
    fi
}

function _devenv_get_path_from_container {
    local container_name project_path
    container_name=${1}
    project_path=$(docker inspect -f "{{json .Config.Labels.project_path }}" ${container_name}${CONTAINER_SUFFIX})
    project_path=${project_path/\"/}
    echo ${project_path%\"}
}

function _devenv_is_daemonized {
    local container_name daemonize
    container_name=${1}
    daemonize=$(docker inspect -f "{{json .Config.Labels.daemonize }}" ${container_name}${CONTAINER_SUFFIX})
    daemonize=${daemonize/\"/}
    echo ${daemonize%\"}
}

# Attach to a dev environment
#
# @param environment name returned by _devenv_list_environments
function _devenv_attach {
    if [ -n "$TMUX" ]; then
        _devenv_error_in_tmux
    fi
    docker exec -ti ${1}${CONTAINER_SUFFIX} script /dev/null -c 'sh /attach.sh'
}

# Rename a dev environment
#
# @param environment name returned by _devenv_list_environments
function _devenv_rename_container {
    docker rename ${1}${CONTAINER_SUFFIX} ${2}${CONTAINER_SUFFIX}
}

# Pull the latest image
#
# @todo This should update this script also
function _devenv_self_update {
    wget -nv -O $COMMAND_PATH https://raw.githubusercontent.com/mkenney/docker-devenv/master/bin/devenv
    docker pull $CONTAINER_IMAGE
}

# Check to see if a named environment is running
#
# @param environment name returned by _devenv_list_environments
function _devenv_is_running {
    running='true'
    container_name="${1}${CONTAINER_SUFFIX}"
    # Container state
    running=$(docker inspect --format="{{ .State.Running }}" ${container_name} 2> /dev/null)
    if [ $? -eq 1 ]; then
        running='false'
    fi
    ghost=$(docker inspect --format="{{ .State.Ghost }}" ${container_name} 2> /dev/null)
    paused=$(docker inspect --format="{{ .State.Paused }}" ${container_name} 2> /dev/null)
    exited=$(docker ps -a -f "status=exited" | grep "${container_name}")

    if [ "" != "${exited}" ]; then
        running='false'
    fi
    if [ "true" == "${ghost}" ]; then
        running='false'
    fi
    if [ "true" == "${paused}" ]; then
        running='true'
    fi

    echo ${running}
}

# Check to see if a named environment is stopped
#
# @param environment name returned by _devenv_list_environments
function _devenv_is_exited {
    container_name="${1}${CONTAINER_SUFFIX}"
    exited='false'
    if [ "false" == "$(_devenv_is_running ${1})" ] && [ "exited" == "$(docker inspect --format="{{ .State.Status }}" ${container_name})" ]; then
        exited='true'
    fi
    echo ${exited}
}

# Check to see if a named environment is paused
#
# @param environment name returned by _devenv_list_environments
function _devenv_is_paused {
    container_name="${1}${CONTAINER_SUFFIX}"
    paused='false'
    if [ "true" == "$(_devenv_is_running ${1})" ] && [ "true" == "$(docker inspect --format="{{ .State.Paused }}" ${container_name})" ]; then
        paused='true'
    fi
    echo ${paused}
}

# List current environments
function _devenv_list_environments {

    quiet='false'
    if [ "-q" == "$1" ]; then
        quiet='true'
        shift
    fi

    local name

    # Stopped environments
    for a in $(docker ps -a -f "status=exited" | grep -e "$CONTAINER_SUFFIX\$" | awk '{print $NF}'); do
        name=${a%$CONTAINER_SUFFIX}
        path=$(_devenv_get_path_from_container $name)
        if [ "" == "$1" ] || [[ "$name" == $1 ]]; then
            if [ "true" == "$quiet" ]; then
                echo $name
            else
                echo " stopped: $name @ $path"
            fi
        fi
    done

    # Running environments
    for a in $(docker ps | grep -e "$CONTAINER_SUFFIX\$" | awk '{print $NF}'); do
        name=${a%$CONTAINER_SUFFIX}
        path=$(_devenv_get_path_from_container $name)
        if [ "" == "${1}" ] || [[ "$name" == $1 ]]; then
            if [ "true" == "$(_devenv_is_paused $name)" ]; then
                if [ "true" == "$quiet" ]; then
                    echo $name
                else
                    echo " paused:  $name @ $path"
                fi
            else
                if [ "true" == "$quiet" ]; then
                    echo $name
                else
                    echo " running: $name @ $path"
                fi
            fi
        fi
    done

    exit 0
}

function _devenv_get_target_from_path {
    for a in $(docker ps -a | grep -e "$CONTAINER_SUFFIX\$" | awk '{print $NF}'); do
        name=${a%$CONTAINER_SUFFIX}
        path=$(_devenv_get_path_from_container $name)
        if [ "$path" == "$1" ]; then
            echo $name;
            exit 0;
        fi
    done
}

#
function _devenv_error_in_tmux {
    echo ""
    echo "This shell is currently running in a Tmux session and attaching to"
    echo "a 'devenv' environment will launch a new Tmux session. Sessions"
    echo "should be nested with care, unset \$TMUX to force."
    exit 1
}

# Display error message
function _devenv_error_notarget {
    echo ""
    echo "The target enviroment must be specified with the '-t' option. Available"
    echo "envirnments can be listed with the 'ls' command: 'devenv ls'"
    exit 1
}

# Display error message
function _devenv_error_nopath {
    echo ""
    echo "The target enviroment must be specified with the '-t' option. Available"
    echo "envirnments can be listed with the 'ls' command: 'devenv ls'"
    exit 1
}

# Display error message
function _devenv_error_target_not_running {
    echo ""
    echo "The specified enviroment '${1}' does not exist, try creating it with"
    echo "'devenv init ${1} [PATH]'"
    exit 1
}

# Display error message
function _devenv_error_target_exists_exited {
    echo ""
    echo "The specified enviroment exists but has exited. Try cleaning it with"
    echo "'devenv kill [-t environment_name]'"
    exit 1
}

# Display error message
function _devenv_error_target_exists_stopped {
    echo ""
    echo "The specified enviroment already exists, try starting it with"
    echo "'devenv start [-t environment_name]'"
    exit 1
}

# Display error message
function _devenv_error_target_exists_running {
    echo ""
    echo "The specified enviroment already exists, try attaching to it with"
    echo "'devenv attach [-t environment_name]'"
    exit 1
}

# Display error message
function _devenv_error_target_does_not_exist {
    echo ""
    echo "The specified enviroment does not exist, try creating it with"
    echo "'devenv create [-t environment_name] [-p environment_path]'"
    exit 1
}

# Display error message
function _devenv_error_new_name_not_specified {
    echo ""
    echo "You must specify a new name to rename an environment:"
    Tcho "'devenv rename -t oldname newname'"
    exit 1
}

# Display error message
function _devenv_error_not_a_directory {
    echo ""
    echo "The specified path '${1}' does not exist"
    exit 1
}

#
function _devenv_error_file_not_found {
    echo "
The file '$1' does not exist
"
    exit 1
}

#
function _devenv_error_nesting_containers {

    local memes=()

    memes+=("
    ─▄▀▀▀▀▄─█──█────▄▀▀█─▄▀▀▀▀▄─█▀▀▄
    ─█────█─█──█────█────█────█─█──█
    ─█────█─█▀▀█────█─▄▄─█────█─█──█
    ─▀▄▄▄▄▀─█──█────▀▄▄█─▀▄▄▄▄▀─█▄▄▀
    ────────────────────────────────
    ─────────▄██████▀▀▀▀▀▀▄
    ─────▄█████████▄───────▀▀▄▄
    ──▄█████████████───────────▀▀▄
    ▄██████████████─▄▀───▀▄─▀▄▄▄──▀▄
    ███████████████──▄▀─▀▄▄▄▄▄▄────█
    █████████████████▀█──▄█▄▄▄──────█
    ███████████──█▀█──▀▄─█─█─█───────█
    ████████████████───▀█─▀██▄▄──────█
    █████████████████──▄─▀█▄─────▄───█
    █████████████████▀███▀▀─▀▄────█──█
    ████████████████──────────█──▄▀──█
    ████████████████▄▀▀▀▀▀▀▄──█──────█
    ████████████████▀▀▀▀▀▀▀▄──█──────█
    ▀████████████████▀▀▀▀▀▀──────────█
    ──███████████████▀▀─────█──────▄▀
    ──▀█████████████────────█────▄▀
    ────▀████████████▄───▄▄█▀─▄█▀
    ──────▀████████████▀▀▀──▄███
    ──────████████████████████─█
    ─────████████████████████──█
    ────████████████████████───█
    ────██████████████████─────█
    ────██████████████████─────█
    ────██████████████████─────█
    ────██████████████████─────█
    ────██████████████████▄▄▄▄▄█
    ───────────────────────────────
    ─────────────█─────█─█──█─█───█
    ─────────────█─────█─█──█─▀█─█▀
    ─────────────█─▄█▄─█─█▀▀█──▀█▀
    ─────────────██▀─▀██─█──█───█
")

    memes+=("
    ───────▄▀▀▀▀▀▀▀▀▀▀▄▄
    ────▄▀▀░░░░░░░░░░░░░▀▄
    ──▄▀░░░░░░░░░░░░░░░░░░▀▄
    ──█░░░░░░░░░░░░░░░░░░░░░▀▄
    ─▐▌░░░░░░░░▄▄▄▄▄▄▄░░░░░░░▐▌
    ─█░░░░░░░░░░░▄▄▄▄░░▀▀▀▀▀░░█
    ▐▌░░░░░░░▀▀▀▀░░░░░▀▀▀▀▀░░░▐▌
    █░░░░░░░░░▄▄▀▀▀▀▀░░░░▀▀▀▀▄░█
    █░░░░░░░░░░░░░░░░▀░░░▐░░░░░▐▌
    ▐▌░░░░░░░░░▐▀▀██▄░░░░░░▄▄▄░▐▌
    ─█░░░░░░░░░░░▀▀▀░░░░░░▀▀██░░█
    ─▐▌░░░░▄░░░░░░░░░░░░░▌░░░░░░█
    ──▐▌░░▐░░░░░░░░░░░░░░▀▄░░░░░█
    ───█░░░▌░░░░░░░░▐▀░░░░▄▀░░░▐▌
    ───▐▌░░▀▄░░░░░░░░▀░▀░▀▀░░░▄▀
    ───▐▌░░▐▀▄░░░░░░░░░░░░░░░░█
    ───▐▌░░░▌░▀▄░░░░▀▀▀▀▀▀░░░█
    ───█░░░▀░░░░▀▄░░░░░░░░░░▄▀
    ──▐▌░░░░░░░░░░▀▄░░░░░░▄▀
    ─▄▀░░░▄▀░░░░░░░░▀▀▀▀█▀
    ▀░░░▄▀░░░░░░░░░░▀░░░▀▀▀▀▄▄▄▄▄
")

    memes+=("
    ───────────────────────────────────
    ─────────▄▄───────────────────▄▄───
    ──────────▀█───────────────────▀█──
    ──────────▄█───────────────────▄█──
    ──█████████▀───────────█████████▀──
    ───▄██████▄─────────────▄██████▄───
    ─▄██▀────▀██▄─────────▄██▀────▀██▄─
    ─██────────██─────────██────────██─
    ─██───██───██─────────██───██───██─
    ─██────────██─────────██────────██─
    ──██▄────▄██───────────██▄────▄██──
    ───▀██████▀─────────────▀██████▀───
    ───────────────────────────────────
    ───────────────────────────────────
    ───────────────────────────────────
    ───────────█████████████───────────
    ───────────────────────────────────
    ───────────────────────────────────
")

    memes+=("
    ───────▄██████████████████▄───────
    ────▄███████████████████████▄─────
    ───███████████████████████████────
    ──█████████████████████████████───
    ─████████████▀─────────▀████████──
    ██████████▀───────────────▀██████─
    ███████▀────────────────────█████▌
    ██████───▄▀▀▀▀▄──────▄▀▀▀▀▄──█████
    █████▀──────────────────▄▄▄───████
    ████────▄█████▄───────▄█▀▀▀█▄──██▀
    ████──▄█▀────▀██─────█▀────────█▀─
    ─▀██───────────▀────────▄███▄──██─
    ──██───▄▄██▀█▄──▀▄▄▄▀─▄██▄▀────███
    ▄███────▀▀▀▀▀──────────────▄▄──██▐
    █▄▀█──▀▀▀▄▄▄▀▀───────▀▀▄▄▄▀────█▌▐
    █▐─█────────────▄───▄──────────█▌▐
    █▐─▀───────▐──▄▀─────▀▄──▌─────██▐
    █─▀────────▌──▀▄─────▄▀──▐─────██▀
    ▀█─█──────▐─────▀▀▄▀▀─────▌────█──
    ─▀█▀───────▄────────────▄──────█──
    ───█─────▄▀──▄█████████▄─▀▄───▄█──
    ───█────█──▄██▀░░░░░░░▀██▄─█──█───
    ───█▄───▀▄──▀██▄█████▄██▀─▄▀─▄█───
    ────█▄────▀───▀▀▀▀──▀▀▀──▀──▄█────
    ─────█▄────────▄▀▀▀▀▀▄─────▄█─────
    ──────███▄──────────────▄▄██──────
    ─────▄█─▀█████▄▄────▄▄████▀█▄─────
    ────▄█───────▀▀██████▀▀─────█▄────
    ───▄█─────▄▀───────────▀▄────█▄───
    ──▄█─────▀───────────────▀────█▄──
    ──────────────────────────────────
    ▐▌▐█▄█▌▐▀▀█▐▀▀▌─█▀─█▀─▐▌▐▀█▐▀█─█─█
    ▐▌▐─▀─▌▐▀▀▀▐──▌─▀█─▀█─▐▌▐▀▄▐▀▄─█─█
    ▐▌▐───▌▐───▐▄▄▌─▄█─▄█─▐▌▐▄█▐─█─█▄█
")

    memes+=("
    ░░░░░░░░░░░░░░░░░░░░░░░░░░█▄
    ░▄▄▄▄▄▄░░░░░░░░░░░░░▄▄▄▄▄░░█▄
    ░▀▀▀▀▀███▄░░░░░░░▄███▀▀▀▀░░░█▄
    ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░█
    ░▄▀▀▀▀▀▄░░░░░░░░░░▄▀▀▀▀▀▄░░░░█
    █▄████▄░▀▄░░░░░░▄█░▄████▄▀▄░░█▄
    ████▀▀██░▀▄░░░░▄▀▄██▀█▄▄█░█▄░░█
    ██▀██████░█░░░░█░████▀█▀██░█░░█
    ████▀▄▀█▀░█░░░░█░█████▄██▀▄▀░░█
    ███████▀░█░░░░░░█░█████▀░▄▀░░░█
    ░▀▄▄▄▄▄▀▀░░░░░░░░▀▀▄▄▄▄▀▀░░░░░█
    ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░█
    ░░▓▓▓▓▓▓▓░░░░░░░░░░▓▓▓▓▓▓▓░░░░█
    ░░░▓▓▓▓▓░░░░░░░░░░░░▓▓▓▓▓░░░░░█
    ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░█
    ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░█▀
    ░░░░░░░░░▄▄███████▄▄░░░░░░░░░█
    ░░░░░░░░█████████████░░░░░░░█▀
    ░░░░░░░░░▀█████████▀░░░░░░░█▀
    ░░░░░░░░░░░░░░░░░░░░░░░░░░█▀
    ░░░░░░░░░░░░░░░░░░░░░░░░░█▀
")

    memes+=("
    ─────────────────▄▄▄▄▄▄▄▄▄▄▄
    ────────────▄▄▀▀▀░░░░░░░░░░░▀▄▄
    ────────▄▄▀▀░░░░░░░▄▄▄▄▄▄▄░░░░░▀▄
    ──────▄▀░░░░░░░░░▄▄▄▄▄▄▄▄▄▄▄░░░░░█
    ────▄▀░░░░░▄▄▄▄▄▄▄░░░░░░░░░░░▄▄▄▄▄█▄▄
    ───▄▀░▐▌░░░░░░░░░░▀▀░░░░░░░▀▀░░░░░░█
    ──█░░░▀░░░░░░░▄▀▀▀▄░░░░▄░░░░▄▀▀▀▄░░▐▌
    ─█░░░░░░▄▄▄░░▐░░▄░░▌░░░░▀▄░▐░░▄░░▌░░█
    ▐▌░░░░▀▀░░░░▄░▀▄▄▄▀░░░░░░░▌░▀▄▄▄▀░░░▐▌
    █░░░░░░░░░░░░▀▄▄▄░░░░░░░░▐░░░░░▄▄▄▀░░█
    █░░░░▄▀░░░░░░░▄▄░░░░░░▄▀░▐░░░▄▄░░░░░░█
    ▐▌░░▀░░░░░░░▄▀░░░▐▀░░░░░░░▀▌░░░▀▄░░░░█
    ▐▌░░░▐░░░░░▐▌░░░░░▀█░░░░░░░▌░░░░█░░░░█
    ─█░░░░░░░░░░░░░░▄░░▀▀▄▄▄▄▀▀░▀▄░░░░░░░█
    ─▐▌░░░░░░░░░░░▄▀░░░░▄▄▄▄▄▄░░░░▌░░░░░░█
    ──█░░░░░░░░░░▐░░░░▄▀░░░░░░▀▄░░▌░░░░░▐▌
    ──▐▌░░░░░░░░░▐░░░░▀░░░▀▀░░░▀░░░░░░░░█
    ───█░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▐▌
    ───▐▌░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░█
    ────▀▄░░░░░░░░░░░░░░░░░░░░░░░░░░░▄▀
    ──────▀▄░░░░░░░░░░░░░░░░░░░░░░░▄▀
    ────────▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
")

    memes+=("
    ──────────▄▀▀▀▀▀▀▄
    ───────────▀▄─────▀▄───▄███▄
    ─────────────▀▄▀▀▀▀▀▀▀▀█▀██▐█
    ────────────▄▀─────────███▄██▄
    ────────▄████▄──────────▀██▀─▀█
    ────────█▌█▄██────────────────█▌
    ────────▀█▄██▀─▄█████████▄─────█
    ──────────█───██▀───────▀██────█
    ▄▀▄▄▀▄────█──██───────────██───█
    █▒▒▒▒█────█──█─────────────█───█
    █▒▒▒▒█────█──▀─────────────▀───█
    █▒▒▒▒█────█────────────────────█
    █▒▒▒▒█────█────────────────────█
    █▒▒▒▒█────█───────────────────▐█
    █▒▒▒▒█───██───────────────────█▌
    ▀████▀──██▀█──────────────────██
    ──██───██──▀█───────────────▄███
    ──██──██────▀█────────────▄▀▓▓██
    ──██─██──────▀█▀▄▄▄▄▄▄▄▄▄▀▓▓▓▓██
    ──████────────█▓▓▓▓▓▓▓▓▓▓▓▓▓▓███
    ──███─────────█▓▓▓▓▓▓▓▓▓▓▓▓▓▓█▓█
    ──██──────────█▓▓▓▓▓▓▓▓▓▓▓▓▓▓█▓█
    ──██──────────█▓▓▓▓▓▓▓▓▓▓▓▓▓██▓█
    ──██─────────▐█▓▓▓▓▓▓▓▓▓▓▓▓▓█▓▓█
    ──██─────────█▓▓▓▓▓▓▓▓▓▓▓▓▓▓█▓▓█
    ──██─────────█▓▓▓▓▓▓▓▓▓▓▓▓▓▓█▓▓█
    ──██─────────█▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓█
")

    memes+=("
    ░░░░░░░░░░░░░░░▄▄▄█▀▀▀▀▀▀▀▄▄▄░░░░░░░░░░
    ░░░░░░░░░░░░▄█▀▀░░░░░░░░░░░▄█▀█▄▄░░░░░░
    ░░░░░░░░░░▄█▀░░░░░░░░░░░░░░█░█▄░▀█▄░░░░
    ░░░░░░░░░░█░░░░░░░░░░░▄░▄░░▄░▄▀░░░░█▄░░
    ░░░░░░░░░█░░░░░░░░░░▄▄▄▀██▄░█▄░▄▄░░░▀▄░
    ░░░░░░░░█▀░░░░░░░░░░░▀█▄░▄██░███▀█▄░░█▄
    ░░░░░░░░█░░░░░░░░░░░▀▀▀▀▀░░░░▀████▀░░░█
    ░░░░░░░░█░░░░░░░░░░░░░▀▀▀░▄▄▄░░█░░░░░░█
    ░░░░░░░░█░░░░░░░░░░░░░░░░░██▀▀▀▀█░░░░░█
    ░░░░░░░░█░░░░░░░░░░░░░░░░█░▄▀▄▄▄▀░░░░░█
    ░░░░░░░░█░░░░░░░░░░░░░░░░██▀████░░░░░▄█
    ░░░░░░░░█▄░░░░░░░░░░░░░░░█▄█████░░░░░█░
    ░░░░░░░░░█▄░░░░░░░░░░░░░▀▀█████▀░░░░▄▀░
    ░░░░░░░░░▄██▄░░░░░░░░░░▄▄▄▄▄░░▄░░░▄█▀░░
    ░░░░░░░▄█▀▄░░▀▀▄▄░░▄▄▀░▀░░░░▀▀▀▄▄▀▀░░░░
    ░░░░░▄█▀░░░▀▄░░░░▀▀▀██▄▄▄▄▄▄█▀▀░░░░░░░░
    ░░░▄▀░░░░░░░░█▄░░░░░░░▄█▀▄░▄▄▄░░░░▀███░
    ░░█▀░░░░░░░░░░▀█▄░░░░▄█▄▄▄█████▄▄▄▀░░░░
    ▄▀░░░░░░░░░░░░░░░▀▀▀█▀▀▀░░░░▀██▀▀░░░░░░
")

    memes+=("
    ░░░░▄▄▄▄▀▀▀▀▀▀▀▀▄▄▄▄▄▄
    ░░░░█░░░░▒▒▒▒▒▒▒▒▒▒▒▒░░▀▀▄
    ░░░█░░░▒▒▒▒▒▒░░░░░░░░▒▒▒░░█
    ░░█░░░░░░▄██▀▄▄░░░░░▄▄▄░░░█
    ░▀▒▄▄▄▒░█▀▀▀▀▄▄█░░░██▄▄█░░░█
    █▒█▒▄░▀▄▄▄▀░░░░░░░░█░░░▒▒▒▒▒█
    █▒█░█▀▄▄░░░░░█▀░░░░▀▄░░▄▀▀▀▄▒█
    ░█▀▄░█▄░█▀▄▄░▀░▀▀░▄▄▀░░░░█░░█
    ░░█░░▀▄▀█▄▄░█▀▀▀▄▄▄▄▀▀█▀██░█
    ░░░█░░██░░▀█▄▄▄█▄▄█▄████░█
    ░░░░█░░░▀▀▄░█░░░█░███████░█
    ░░░░░▀▄░░░▀▀▄▄▄█▄█▄█▄█▄▀░░█
    ░░░░░░░▀▄▄░▒▒▒▒░░░░░░░░░░█
    ░░░░░░░░░░▀▀▄▄░▒▒▒▒▒▒▒▒▒▒░█
    ░░░░░░░░░░░░░░▀▄▄▄▄▄░░░░░█
")

    memes+=("
    ──────────────────────────────────
    ───▓▓▓▓───────────────────────────
    ───████───────█▀▀▀ █▀▀█───────────
    ───████───────█─▀█ █──█───────────
    ───████───────▀▀▀▀ ▀▀▀▀───────────
    ─▄██████▄ █──█ █▀▀█ █▀▄▀█ █▀▀─────
    ─████████ █▀▀█ █──█ █─▀─█ █▀▀─────
    ─████████ ▀──▀ ▀▀▀▀ ▀───▀ ▀▀▀─────
    ─█▒▒▒▒▒▒█─────────────────────────
    ─█▒▒▒▒▒▒█───█──█ █▀▀█ █──█────────
    ─█▒▒▒▒▒▒█───█▄▄█ █──█ █──█────────
    ─█▒▒▒▒▒▒█───▄▄▄█ ▀▀▀▀ ─▀▀▀────────
    ─█▒▒▒▒▒▒█─────────────────────────
    ─█▒▒▒▒▒▒█───█▀▀█ █▀▀█ █▀▀─────────
    ─█▒▒▒▒▒▒█───█▄▄█ █▄▄▀ █▀▀─────────
    ─█▒▒▒▒▒▒█───▀──▀ ▀─▀▀ ▀▀▀─────────
    ─█▒▒▒▒▒▒█─────────────────────────
    ─█▒▒▒▒▒▒█ █▀▀▄ █▀▀█ █──█ █▀▀▄ █─█─
    ─█▒▒▒▒▒▒█ █──█ █▄▄▀ █──█ █──█ █▀▄─
    ─▀██████▀ ▀▀▀─ ▀─▀▀ ▀▀▀▀ ▀──▀ ▀─▀─
    ──────────────────────────────────
")

    memes+=("
    ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
    ▌▄─────────────────────────────▄▐
    ▌───────────────────────────────▐
    ▌──▄▀▀▄──▄▀▀──▄▀▀──█▄─▄█──▄▀▀▄──▐
    ▌──█─────█────█────█─█─█──█─────▐
    ▌───▀▀▄──█▀▀──█▀▀──█───█───▀▀▄──▐
    ▌─────█──█────█────█───█─────█──▐
    ▌──▀▄▄▀──▀▄▄──▀▄▄──█───█──▀▄▄▀──▐
    ▌───────────────────────────────▐
    ▌───────────────────────────────▐
    ▌──█────▄▀▀──▄▀▀▀▄───▀───▀▀█▀▀──▐
    ▌──█────█────█──────▀█▀────█────▐
    ▌──█────█▀▀──█──▀█───█─────█────▐
    ▌──█────█────█───█───█─────█────▐
    ▌──█▄▄──▀▄▄──▀▄▄▄▀──▄█▄────█────▐
    ▌───────────────────────────────▐
    ▌▀─────────────────────────────▀▐
    ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀
")

    memes+=("
    █▀▀█ ─▀─ ▀▀█▀▀ █▀▀ █──█
    █▀▀▄ ▀█▀ ──█── █── █▀▀█
    █▄▄█ ▀▀▀ ──▀── ▀▀▀ ▀──▀

    █▀▀█ █── █▀▀ █▀▀█ █▀▀ █▀▀ █
    █──█ █── █▀▀ █▄▄█ ▀▀█ █▀▀ ▀
    █▀▀▀ ▀▀▀ ▀▀▀ ▀──▀ ▀▀▀ ▀▀▀ ▄
")

    memes+=("
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@       ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@@@@@@@@@/     .,.*@@@@@@@# *@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@@@@(.   %@@@@@@@@@@@@@@@@@@ .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@(   %@@@@@@@@@@@@/@@&@@@@@@(% (@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@.  &@@@@@@@,@@@@@@@%#@&@@@@&@@@@% .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@  @@@@@@@@@@@@@@@*&*#@@@@/@@@(%@@@@,  @@@@@@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@. @@@@@.@@%*@*** @@@@@@@@&@*# &./ /@@@#   &@@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@( @@@@@@*@@@@. . %%@@@@*@@@@@% #/ '  &@@@@@     *@@@@@@@@@@@@@@@@@@
    @@@@@@& %@@@@@@@@@&@ */,,,@@@@&@@@@@@@(.*  (@&&&%#####%@*  &@@@@@@@@@@@@@@
    @@@@@@ .@@@@@@@@@@@@/ *, //@@&@&@@//@@@@%*#&@@@@%(*   .@@@@. @@@@@@@@@@@@@
    @@@@@% &@@@@@@@@@@@%*#**@@@@#@@,%%@@@@@@@@@@&/      @@@/@@@@@  .@@@@@@@@@@
    @@@@@& @@%/@@@@@@@*@@&/(@@*@@@@@@.@(@@@@&@.@@,     &@@@@@@@@@@@@. *@@@@@@@
    @@@@@& @@@@@@@@@@@@@@#%@@@@@@@@@@@ @@@/.        ,@@&@@@@#@@@@@@@@@ ,@@@@@@
    @@@@@& @@@@@@@@@@@/@@(/  . ... .     *&*@,.   %@@*@@*@@@@@@@@@@@@@@  @@@@@
    @@@@@  (@@@@@@@@@&@@@(*@@@@@@@@@%&@.&&&*/@@(@@@#@@@/@@@@@@@@@@@@@@@@  *@@@
    @@@@ *@@.@@@@@@@@&@@@@&@@/@##*(@@@@@@@@@@@@@@*@@*/@@@@@@@@@@@@@@@@@@@@ .@@
    @@@/ @@@@@ @@@@@@@@&@@(*@@@@@@@@@@@//&@((@@@@@@@@@@@@@@@@@@@*@@@@@@@@@& #@
    @@@ /@@@@*#@@(@@@@@@@@@&@@*@@@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@*@@@@@@@@@&@  @
    @@@ #@@@@@@@@*@@@@@@@@@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/@@(@@@@@@@@@@@@*% @
    @@@ #@@(@@@@@%@@@@@@@@@*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@% @
    @@. @@@@/@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(@@@@@@@@@@@@@@@  @
    @& #@/@@@@@@@@@@@@@@@@@/@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(*@@@@@@@@@@@% %@
    @& &@@@@&*@@@@(@@@@@@@@@@#&@@@@@@@@@@@@@@@@@@@@@@@@&@@&@@@@@@@@@@@@@@@ ,@@
    @@  @@#@@@@@@@@&@@@@@@@@@@@*@@@@@@@@@@@@@@@@@@@@@@@@@@(@@@@@@@@@@@@@@ ,@@@
    @@@  @@@@@@@@@@*@@@@@@@@@@@@%@@@@@@@*&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/ (@@@@
    @@@@* %@@@@@@@@@@@@@@@@@@@@@@*@@@@@@@@@@@@@@@*@@@@@@@@@@@@@@@@@@@@  @@@@@@
    @@@@@&  @@@@@@@#@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@ .@@@@@@@
    @@@@@@@%   .&@/@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  &@@@@@@@@
    @@@@@@@@@@@@%  .@@**@%@@@@@@@@@@@@@@@@@@@@@@(@@@@@@@@@@@@@@@@* *@@@@@@@@@@
    @@@@@@@@@@@@@@@  &@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  @@@@@@@@@@@@
    @@@@@@@@@@@@@@@@* @@@@/@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/ @@@@@@@@@@@@@
    @@@@@@@@@@@@@@@@@* ,////&@@@@@@@@@@@@@@@@@@@*@@@@@@@@&&@@@& /@@@@@@@@@@@@@
    @@@@@@@@@@@@@@@@@@@@/   /@@@@@@/(@@@@@@@&@@*@@@@@@@(*/@*  .@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@@@@@@@@@@@@.    /#@@@@@@@@@@@@@@@@@@&.   @@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@####/*,          .%@@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&     /@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@/ @& @@@   /@@@@@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  @@@**@@@@@@@/  @@@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@, /@@@@@ @@@@@@@@@* @@@@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@( ,@@@@@@ %@@@@@@@@@@. @@@@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@. @@@@@@@@@ @@@@@@@@@@@@* @@@@@@@@@@@@@@@@@
    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ &@@@@@@@@@@@@@  &@@@@@@@@@@@@@@
")

    meme=${memes[$RANDOM % ${#memes[@]}]}

    echo "$meme

    You can't start an instance inside an instance
"
    exit 1
}

##############################################################################
# Parse command options
##############################################################################

_devenv_path=""
_devenv_target=""
_devenv_daemonize="false"
_devenv_ctags_excludes=()
_devenv_tmux_prefix='-'
_devenv_additional_volumes=()

while :; do
    case $1 in
        #
        # help screen
        #
        -h|-\?)
            _devenv_show_usage
            ;;
        --help|help)
            _devenv_show_help
            ;;
        #
        # Add an exclude pattern to the ctags build
        # see `man ctags-exuberant`
        #
        --ctags-exclude=?*)
            _devenv_ctags_excludes+=("${1#*=}")
            ;;
        #
        # continue running when detaching, otherwise pause
        #
        -d|--daemonize)
            _devenv_daemonize="true"
            ;;

        #
        # volume mounts
        #
        -v)
            if [ -n "$2" ]; then
                _devenv_additional_volumes+=($2)
                shift
            else
                _devenv_show_help
            fi
            ;;
        --volume=?*)
            _devenv_additional_volumes+=(${1#*=})
            ;;
        #
        # project path
        #
        -p)
            if [ -n "$2" ]; then
                _devenv_path=$2
                shift
            else
                _devenv_show_help
            fi
            ;;
        --path=?*)
            _devenv_path=${1#*=}
            ;;
        --path|--path=)
            _devenv_show_help
            ;;
        #
        # target session
        #
        -t)
            if [ -n "$2" ]; then
                _devenv_target=$2
                shift
            else
                _devenv_show_help
            fi
            ;;
        --target=?*)
            _devenv_target=${1#*=}
            ;;
        --target|--target=)
            _devenv_show_help
            ;;
        #
        # .tmux.conf path
        #
        --tmux=?*)
            if [ -f ${1#*=} ]; then
                _tmux_conf_path=$(realpath ${1#*=})
            else
                _devenv_error_file_not_found ${1#*=}
            fi
            ;;
        --tmux)
            if [ -f "$HOME/.tmux.conf" ]; then
                _tmux_conf_path=$HOME
            else
                _devenv_error_file_not_found "$HOME/.tmux.conf"
            fi
            ;;
        #
        # secondary tmux prefix key binding
        #
        --tmux-prefix=?*)
            _devenv_tmux_prefix=${1#*=}
            ;;
        #
        # .vimrc path
        #
        --vimrc=?*)
            if [ -f ${1#*=} ]; then
                _vimrc_conf_path=$(realpath ${1#*=})
            else
                _devenv_error_file_not_found ${1#*=}
            fi
            ;;
        --vimrc)
            if [ -f "$HOME/.vimrc" ]; then
                _vimrc_conf_path=$HOME
            else
                _devenv_error_file_not_found "$HOME/.vimrc"
            fi
            ;;
        #
        # Attach to a running container
        #
        attach)
            _devenv_command=$1
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                shift
            fi
            ;;
        #
        # Attach to a running container
        #
        build-tags)
            _devenv_command=$1
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                _devenv_path='n/a'
                shift
            fi
            ;;
        #
        # Initialize a new container
        #
        create|init)
            _devenv_command=$1
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                shift
            fi
            if [ "" == "$_devenv_path" ]; then
                _devenv_path=$2
                shift
            fi
            ;;
        #
        # Kill a current container
        #
        kill)
            _devenv_command=$1
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                shift
            fi
            ;;
        ls)
            _devenv_command=$1
            _devenv_secondary_command=$2
            _devenv_target='n/a'
            shift
            ;;
        #
        # Restart a running container
        #
        refresh|reload|restart)
            _devenv_command='restart'
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                shift
            fi
            ;;
        #
        # rename session
        #
        rename)
            _devenv_command=$1
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                shift
            fi
            if [ -n  "$2" ]; then
                _devenv_secondary_command=$2
                shift
            else
                _devenv_show_usage
            fi
            ;;
        self-update)
            _devenv_command=$1
            _devenv_target='n/a'
           ;;
        start|unpause)
            _devenv_command='start'
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                shift
            fi
            ;;
        stop|pause)
            _devenv_command='stop'
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                shift
            fi
            ;;
        *)
            break
    esac

    shift
done

if [ "true" == "$IS_DEVENV" ]; then
    _devenv_error_nesting_containers
fi

if [[ $@ ]]; then
    _devenv_show_usage
fi

##############################################################################
# Init script variables
##############################################################################

# Setup the project path, default to the current directory
if [ "" == "${_devenv_path}" ]; then
    _devenv_path='.'
fi
if [ ! -d "$_devenv_path" ]; then
    _devenv_error_not_a_directory $_devenv_path
fi
_devenv_project_path=$(realpath "${_devenv_path}")

# Setup the container name. If the project path is associated with a current
# container, use that container's name, otherwise default to the basename of
# the project path
if [ "" == "${_devenv_target}" ]; then
    _tmp=$(_devenv_get_target_from_path $_devenv_project_path);
    if [ "" != "$_tmp" ]; then
        _devenv_container_name=$_tmp
    else
        _devenv_container_name=$(basename $_devenv_project_path)
    fi
else
    _devenv_container_name=${_devenv_target}

    # If the environment name is specified and it is running, override the
    # project path with the label from the container
    if [ "false" != "$(_devenv_is_running ${_devenv_container_name})" ]; then
        _devenv_project_path=$(_devenv_get_path_from_container ${_devenv_container_name})
    fi
fi

# strip any invalid characters
_devenv_container_name=$(echo "$_devenv_container_name" | tr -d '.,;:\\')

# Flag noting whether the environment specified by _devenv_container_name exists
_devenv_target_exists='false'
if [ "" != "$(_devenv_list_environments -q | grep "^${_devenv_container_name}")" ]; then
    _devenv_target_exists='true'
fi

# Default command
if [ "" == "${_devenv_command}" ]; then
    _devenv_command='attach'
fi

# Conf path argument defaults
if [ "" == "${_tmux_conf_path}" ]; then
    _tmux_conf_path='-'
fi
if [ "" == "${_vimrc_conf_path}" ]; then
    _vimrc_conf_path='-'
fi
if [ "" == "${_devenv_daemonize}" ]; then
    _devenv_daemonize='-'
fi

_devenv_ctags_excludes=${_devenv_ctags_excludes[@]}
_devenv_ctags_excludes=$(echo $_devenv_ctags_excludes | sed "s/ /,/g")
if [ "" == "$_devenv_ctags_excludes" ]; then
    _devenv_ctags_excludes='-'
fi

if [ "" == "$_devenv_tmux_prefix" ]; then
    _devenv_tmux_prefix='-'
fi

_devenv_additional_volumes=${_devenv_additional_volumes[@]}
_devenv_additional_volumes=$(echo $_devenv_additional_volumes | sed "s/ /,/g")
if [ "" == "$_devenv_additional_volumes" ]; then
    _devenv_additional_volumes='-'
fi

##############################################################################
# Execute
##############################################################################

# Attach to a running container
if [ "attach" == "${_devenv_command}" ]; then
    if [ "false" == "$(_devenv_is_running ${_devenv_container_name})" ]; then
        _devenv_error_target_not_running $_devenv_container_name
    fi
    _paused=$(_devenv_is_paused ${_devenv_container_name})
    if [ "true" == "$_paused" ]; then
        _devenv_unpause_container ${_devenv_container_name}
    fi
    _devenv_attach ${_devenv_container_name}
    if [ "true" == "$_paused" ] && [ "true" != "$(_devenv_is_daemonized $_devenv_container_name)" ]; then
        _devenv_pause_container ${_devenv_container_name}
    fi


# Attach to a running container
elif [ "build-tags" == "${_devenv_command}" ]; then
    if [ "false" == "$(_devenv_is_running ${_devenv_container_name})" ]; then
        _devenv_error_target_not_running $_devenv_container_name
    fi

    _paused=$(_devenv_is_paused ${_devenv_container_name})
    if [ "true" == "$_paused" ]; then
        _devenv_unpause_container ${_devenv_container_name}
    fi
    _devenv_build_tags ${_devenv_container_name}
    if [ "true" == "$_paused" ] && [ "true" != "$(_devenv_is_daemonized $_devenv_container_name)" ]; then
        _devenv_pause_container ${_devenv_container_name}
    fi


# Create and start a new container
elif [ "init" == "${_devenv_command}" ]; then
    if [ "true" == "${_devenv_target_exists}" ] && [ "true" == "$(_devenv_is_exited ${_devenv_container_name})" ]; then
        _devenv_error_target_exists_exited
    elif [ "true" == "${_devenv_target_exists}" ] && [ "false" == "$(_devenv_is_running ${_devenv_container_name})" ]; then
        _devenv_error_target_exists_stopped
    elif [ "true" == "$(_devenv_is_running ${_devenv_container_name})" ]; then
        _devenv_error_target_exists_running
    fi
    _devenv_create_container ${_devenv_container_name} ${_devenv_project_path} ${_tmux_conf_path} ${_vimrc_conf_path} ${_devenv_daemonize} ${_devenv_ctags_excludes[@]} ${_devenv_tmux_prefix} "${_devenv_additional_volumes[@]}"


# Kill a running container
elif [ "kill" == "${_devenv_command}" ]; then
    _devenv_kill_container ${_devenv_container_name}


# List current containers
elif [ "ls" == "${_devenv_command}" ]; then
    _devenv_list_environments ${_devenv_secondary_command}


# Refresh the specified container
elif [ "restart" == "${_devenv_command}" ]; then
    if [ "false" == "$(_devenv_is_running ${_devenv_container_name})" ]; then
        _devenv_error_target_not_running ${_devenv_container_name}
    fi
    daemonize=$(_devenv_is_daemonized $_devenv_container_name)
    if [ "true" == "$(_devenv_is_daemonized $_devenv_container_name)" ] || [ "true" == "$_devenv_daemonize" ]; then
        daemonize='true'
    fi
    _devenv_kill_container ${_devenv_container_name}
    _devenv_create_container ${_devenv_container_name} ${_devenv_project_path} ${_tmux_conf_path} ${_vimrc_conf_path} ${_devenv_daemonize} ${_devenv_ctags_excludes[@]} ${_devenv_tmux_prefix} "${_devenv_additional_volumes[@]}"


# Rename a current container
elif [ "rename" == "${_devenv_command}" ]; then
    if [ "" == "${_devenv_secondary_command}" ]; then
        _devenv_error_new_name_not_specified
    fi
    if [ "false" == "${_devenv_target_exists})" ]; then
        _devenv_error_target_does_not_exist
    fi
    _devenv_rename_container ${_devenv_container_name} ${_devenv_secondary_command}


# Update to the latest image
# @todo Update this script from github too...
elif [ "self-update" == "${_devenv_command}" ]; then
    _devenv_self_update


# Unpause a paused container
elif [ "start" == "${_devenv_command}" ]; then
    _devenv_unpause_container ${_devenv_container_name}


# Pause a running container
elif [ "stop" == "${_devenv_command}" ]; then
    _devenv_pause_container ${_devenv_container_name}


# Unknown command
else
    echo " Unknown command '${_devenv_command}'"
    echo ""
    _devenv_show_usage
fi

exit 0
