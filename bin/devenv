#!/bin/bash

COMMAND=$(basename ${0})
CONTAINER_SUFFIX=-devenv-

##############################################################################
# Define all functions
##############################################################################

# Show the help screen
function _devenv_show_usage {
    echo " Usage: $(basename ${0}) [options] [commands]"
    echo "    Options:"
    echo "        -h, -?                        Show usage"
    echo "        --help, help                  Show extended help screen"
    echo "        -c, --continue                Continue running the environment after"
    echo "                                      detaching"
    echo "        -p PATH, --path=PATH          Specify the project path"
    echo "        -t TARGET, --target=TARGET    Specify an environment by name"
    echo ""
    echo "    Commands:"
    echo "        attach                        Attach to a running environment"
    echo "        init                          Create a new environment"
    echo "        kill                          Stop a running environment and clean up"
    echo "        ls                            List available environments"
    echo "        refresh, reload, restart      Kill and re-initialize an environment"
    echo "        rename TARGET NEW_NAME        Rename an environment"
    echo "        self-update                   Update to the latest docker image"
    echo "        start                         Start a paused environment"
    echo "        stop                          Pause a running environment"
    echo ""
    echo " Michael Kenney <mkenney@webbedlam.com>"
    echo ""
    exit 1
}

# Show the help screen
function _devenv_show_help {
    echo " NAME"
    echo "     $(basename ${0}) -- Manage mkenney/devenv docker work environment containers"
    echo ""
    echo " SYNOPSYS"
    echo "     $(basename ${0}) [-t TARGET] [-p PATH] [-c] [command]"
    echo ""
    echo " DESCRIPTION"
    echo "     The $(basename ${0}) utility is used to manage mkenney/devenv docker containers"
    echo "     to create a consistent bash-based shell environment."
    echo ""
    echo " OPTIONS"
    echo "     Command modifiers. Most commands take their own arguments. The init command"
    echo "     however requires any path or target name specifications be pased using the"
    echo "     options below"
    echo ""
    echo "         -h, -?"
    echo "             Show the command usage screen"
    echo ""
    echo "         --help, help"
    echo "             Show this extended help screen"
    echo ""
    echo "         -c, --continue"
    echo "             Used when attaching to an environment. If specified, allow the"
    echo "             environent to continue running after detaching from the session,"
    echo "             otherwise the environment container will be paused automatically"
    echo ""
    echo "         -p PATH, --path=PATH"
    echo "             Specify the project path, this directory is mounted into /src"
    echo "             inside the environment. If omitted, the project path is set to"
    echo "             the current directory."
    echo ""
    echo "         -t TARGET, --target=TARGET"
    echo "             Specify an environment name. If omitted, the environment name"
    echo "             is set to the basename of the project path."
    echo ""
    echo " COMMANDS"
    echo "     Available commands $(basename ${0}) can execute"
    echo ""
    echo "         attach [TARGET]"
    echo "             Attach to a running environment specified by the optional [TARGET]"
    echo "             argument. If omitted, TARGET value defaults to the basename of the"
    echo "             project path or the name of the current directory if none is"
    echo "             specified. This is the default command."
    echo ""
    echo "             EXAMPLES"
    echo "                 $(basename ${0}) attach [TARGET]"
    echo "                 $(basename ${0}) -t TARGET attach"
    echo "                 $(basename ${0}) -p PATH attach"
    echo ""
    echo "         init [TARGET] [PATH]"
    echo "             Create and start a new environment, optionally naming it and specifying"
    echo "             the project path. The PATH defaults to the current directory and the"
    echo "             TARGET defaults to the basename of the project path."
    echo ""
    echo "             EXAMPLES"
    echo "                 $(basename ${0}) create [TARGET] [PATH]"
    echo "                 $(basename ${0}) -p PATH create [TARGET]"
    echo "                 $(basename ${0}) -t TARGET create [PATH]"
    echo "                 $(basename ${0}) -t TARGET -p PATH create"
    echo ""
    echo "         kill"
    echo "             Stop a running environment and clean up"
    echo ""
    echo "             EXAMPLES"
    echo "                 $(basename ${0}) kill TARGET"
    echo "                 $(basename ${0}) -t TARGET kill"
    echo "                 $(basename ${0}) -p PATH kill"
    echo ""
    echo "         ls [pattern]"
    echo "             List currently running environments, optionally filtering results with"
    echo "             a glob pattern"
    echo ""
    echo "             EXAMPLES"
    echo "                 $(basename ${0}) ls"
    echo "                 $(basename ${0}) ls java*"
    echo "                 $(basename ${0}) ls *-php-v5.?"
    echo ""
    echo "         refresh TARGET, reload TARGET, restart TARGET"
    echo "             Kill, re-create and attach to the specified running environment"
    echo ""
    echo "             EXAMPLES"
    echo "                 $(basename ${0}) restart TARGET"
    echo "                 $(basename ${0}) -t TARGET restart"
    echo "                 $(basename ${0}) -p PATH restart"
    echo ""
    echo "         rename TARGET NEW_NAME"
    echo "             Rename a running or stopped environment"
    echo ""
    echo "             EXAMPLES"
    echo "                 $(basename ${0}) rename TARGET NEW_NAME"
    echo "                 $(basename ${0}) -t TARGET rename NEW_NAME"
    echo ""
    echo "         self-update"
    echo "             Update to the latest mkenney/devenv docker image"
    echo ""
    echo "             EXAMPLES"
    echo "                 $(basename ${0}) self-update"
    echo ""
    echo "         start TARGET"
    echo "             Start a suspended environment"
    echo ""
    echo "             EXAMPLES"
    echo "                 $(basename ${0}) start TARGET"
    echo ""
    echo "         stop TARGET"
    echo "             Suspend a running environment"
    echo ""
    echo "             EXAMPLES"
    echo "                 $(basename ${0}) stop TARGET"
    echo ""
    echo " TODO"
    echo "     Improve error handling and messages"
    echo ""
    echo " AUTHORS"
    echo "     Michael Kenney <mkenney@webbedlam.com>"
    echo ""
    exit 1
}

# Kill a dev container
#
# @param environment name returned by _devenv_list_environments
function _devenv_kill_container {
    if [ "true" == "$(_devenv_is_paused ${1})" ]; then
        _devenv_unpause_container ${1}
    fi
    if [ "true" == "$(_devenv_is_running ${1})" ]; then
        echo "Stopping '${1}'..."
        docker stop ${1}${CONTAINER_SUFFIX} > /dev/null
        echo "Removing '${1}'..."
        docker rm ${1}${CONTAINER_SUFFIX} > /dev/null
    else
        echo "Container '$1' is not running"
    fi
    running='false'
}

# Stop a dev container
#
# @param environment name returned by _devenv_list_environments
function _devenv_pause_container {
    if [ "true" == "$(_devenv_is_running ${1})" ]; then
        echo "Pausing '$1'..."
        docker pause ${1}${CONTAINER_SUFFIX} > /dev/null
    else
        echo "Container '$1' is not running"
    fi
    running='false'
}

# Start a dev container
#
# @param environment name returned by _devenv_list_environments
function _devenv_unpause_container {
    if [ "true" == "$(_devenv_is_paused ${1})" ]; then
        echo "Restoring '$1'..."
        docker unpause ${1}${CONTAINER_SUFFIX} > /dev/null
    else
        echo "Container '$1' is not running"
    fi
    running='false'
}

# Start the tmux session
#
# @param environment name returned by _devenv_list_environments
function _devenv_init_session {
    cat /oracle/product/latest/network/admin/tnsnames.ora | docker exec -i ${1}${CONTAINER_SUFFIX} sudo sh -c 'cat > /oracle/product/latest/network/admin/tnsnames.ora'
    docker exec -ti ${1}${CONTAINER_SUFFIX} script /dev/null -c 'sh /init.sh'
}

# Start a dev container
#
# @param environment name returned by _devenv_list_environments
# @param path
function _devenv_create_container {
    if [ "true" == "$(_devenv_is_running ${1})" ]; then
        echo "Container '${1}' is already running"
    else

        echo "Starting dev container '${1}' at ${2}..."
        local folder_name=$(basename $2)
        docker run \
            -itd \
            -h ${1} \
            -e HOSTNAME=${1} \
            -e PROJECT_PATH=/src \
            --add-host docker:127.0.0.1 \
            -e TERM=$TERM \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v ~/.ssh/:/home/dev/.ssh/:ro \
            -v ~/.oracle/:/home/dev/.oracle/:ro \
            -v ${2}:/src:rw \
            -w "/src" \
            --label "project_path=${2}" \
            --name ${1}${CONTAINER_SUFFIX} \
            mkenney/devenv

        _devenv_init_session ${1}
    fi
}

function _devenv_get_path_from_container {
    local container_name project_path
    container_name=${1}
    project_path=$(docker inspect -f "{{json .Config.Labels.project_path }}" ${container_name}${CONTAINER_SUFFIX})
    project_path=${project_path/\"/}
    echo ${project_path%\"}
}

# Attach to a dev environment
#
# @param environment name returned by _devenv_list_environments
function _devenv_attach {
    if [ -n "$TMUX" ]; then
        _devenv_error_in_tmux
    fi
    docker exec -ti ${1}${CONTAINER_SUFFIX} script /dev/null -c 'sh /attach.sh'
}

# Rename a dev environment
#
# @param environment name returned by _devenv_list_environments
function _devenv_rename_container {
    docker rename ${1}${CONTAINER_SUFFIX} ${2}${CONTAINER_SUFFIX}
}

# Pull the latest image
#
# @todo This should update this script also
function _devenv_self_update {
    docker pull mkenney/devenv
}

# Check to see if a named environment is running
#
# @param environment name returned by _devenv_list_environments
function _devenv_is_running {
    running='true'
    container_name="${1}${CONTAINER_SUFFIX}"
    # Container state
    running=$(docker inspect --format="{{ .State.Running }}" ${container_name} 2> /dev/null)
    if [ $? -eq 1 ]; then
        running='false'
    fi
    ghost=$(docker inspect --format="{{ .State.Ghost }}" ${container_name} 2> /dev/null)
    paused=$(docker inspect --format="{{ .State.Paused }}" ${container_name} 2> /dev/null)
    exited=$(docker ps -a -f "status=exited" | grep "${container_name}")

    if [ "" != "${exited}" ]; then
        running='false'
    fi
    if [ "true" == "${ghost}" ]; then
        running='false'
    fi
    if [ "true" == "${paused}" ]; then
        running='true'
    fi

    echo ${running}
}

# Check to see if a named environment is running
#
# @param environment name returned by _devenv_list_environments
function _devenv_is_paused {
    container_name="${1}${CONTAINER_SUFFIX}"
    paused='false'
    if [ "true" == "$(_devenv_is_running ${1})" ] && [ "true" == "$(docker inspect --format="{{ .State.Paused }}" ${container_name})" ]; then
        paused='true'
    fi
    echo ${paused}
}

# List current environments
function _devenv_list_environments {

    # Stopped environments
    if [ "" != "$(docker ps -a -f "status=exited" | grep '\-devenv\-$')" ]; then
        for a in $(docker inspect --format='{{.Name}}' $(docker ps -q --no-trunc) | grep '\-devenv\-$' | grep ); do
            name=${a:1:${#a}-1}
            name=${name%$CONTAINER_SUFFIX}
            if [ "" == "${1}" ] || [[ "$name" == $1 ]]; then
                echo " stopped: ${name}"
            fi
        done
    fi

    # Running environments
    local name
    if [ "" != "$(docker ps | grep '\-devenv\-$')" ]; then
        for a in $(docker inspect --format='{{.Name}}' $(docker ps -q --no-trunc) | grep '\-devenv\-$'); do
            name=${a:1:${#a}-1}
            name=${name%$CONTAINER_SUFFIX}
            if [ "" == "${1}" ] || [[ "$name" == $1 ]]; then
                if [ "true" == "$(_devenv_is_paused ${name%$CONTAINER_SUFFIX})" ]; then
                    echo " paused:  ${name}"
                else
                    echo " running: ${name}"
                fi
            fi
        done
    fi

    exit 0
}

#
function _devenv_error_in_tmux {
    echo ""
    echo "This shell is currently running in a Tmux session and attaching to"
    echo "a 'devenv' environment will launch a new Tmux session. Sessions"
    echo "should be nested with care, unset \$TMUX to force."
    exit 1
}

# Display error message
function _devenv_error_notarget {
    echo ""
    echo "The target enviroment must be specified with the '-t' option. Available"
    echo "envirnments can be listed with the 'ls' command: 'devenv ls'"
    exit 1
}

# Display error message
function _devenv_error_nopath {
    echo ""
    echo "The target enviroment must be specified with the '-t' option. Available"
    echo "envirnments can be listed with the 'ls' command: 'devenv ls'"
    exit 1
}

# Display error message
function _devenv_error_target_not_running {
    echo ""
    echo "The specified enviroment '${1}' is not running, try starting it with"
    echo "'devenv start [-t environment_name]'"
    exit 1
}

# Display error message
function _devenv_error_target_exists_stopped {
    echo ""
    echo "The specified enviroment already exists, try starting it with"
    echo "'devenv start [-t environment_name]'"
    exit 1
}

# Display error message
function _devenv_error_target_exists_running {
    echo ""
    echo "The specified enviroment already exists, try attaching to it with"
    echo "'devenv attach [-t environment_name]'"
    exit 1
}

# Display error message
function _devenv_error_target_does_not_exist {
    echo ""
    echo "The specified enviroment does not exist, try creating it with"
    echo "'devenv create [-t environment_name] [-p environment_path]'"
    exit 1
}

# Display error message
function _devenv_error_new_name_not_specified {
    echo ""
    echo "You must specify a new name to rename an environment:"
    Tcho "'devenv rename -t oldname newname'"
    exit 1
}

# Display error message
function _devenv_error_not_a_directory {
    echo ""
    echo "The specified path '${1}' does not exist"
    exit 1
}

##############################################################################
# Parse command options
##############################################################################

_devenv_path=""
_devenv_target=""
_devenv_continue="false"

while :; do
    case $1 in
        #
        # help screen
        #
        -h|-\?)
            _devenv_show_usage
            ;;
        --help|help)
            _devenv_show_help
            ;;
        #
        # continue running when detaching, otherwise pause
        #
        -c|--continue)
            _devenv_continue="true"
            ;;
        #
        # project path
        #
        -p)
            if [ -n "$2" ]; then
                _devenv_path=$2
                shift
            else
                _devenv_show_help
            fi
            ;;
        --path=?*)
            _devenv_path=${1#*=}
            ;;
        --path|--path=)
            _devenv_show_help
            ;;
        #
        # target session
        #
        -t)
            if [ -n "$2" ]; then
                _devenv_target=$2
                shift
            else
                _devenv_show_help
            fi
            ;;
        --target=?*)
            _devenv_target=${1#*=}
            ;;
        --target|--target=)
            _devenv_show_help
            ;;

        #
        # Attach to a running container
        #
        attach)
            _devenv_command=$1
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                shift
            fi
            ;;
        #
        # Initialize a new container
        #
        init)
            _devenv_command=$1
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                shift
            fi
            if [ "" == "$_devenv_path" ]; then
                _devenv_path=$2
                shift
            fi
            ;;
        #
        # Kill a current container
        #
        kill)
            _devenv_command=$1
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                shift
            fi
            ;;
        ls)
            _devenv_command=$1
            _devenv_secondary_command=$2
            shift
            ;;
        #
        # Restart a running container
        #
        refresh)
            _devenv_command='restart'
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                shift
            fi
            ;;
        reload)
            _devenv_command='restart'
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                shift
            fi
            ;;
        restart)
            _devenv_command='restart'
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                shift
            fi
            ;;
        #
        # rename session
        #
        rename)
            _devenv_command=$1
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                shift
            fi
            if [ -n  "$2" ]; then
                _devenv_secondary_command=$2
                shift
            else
                _devenv_show_help
            fi
            ;;
        self-update)
            _devenv_command=$1
           ;;
        start)
            _devenv_command=$1
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                shift
            fi
            ;;
        stop)
            _devenv_command=$1
            if [ "" == "$_devenv_target" ]; then
                _devenv_target=$2
                shift
            fi
            ;;
        *)
            break
    esac

    shift
done

if [[ $@ ]]; then
    _devenv_show_usage
fi

##############################################################################
# Init script variables
##############################################################################

# Setup the project path, default to the current directory
if [ "" == "${_devenv_path}" ]; then
    _devenv_path='.'
fi
if [ ! -d "$_devenv_path" ]; then
    _devenv_error_not_a_directory $_devenv_path
fi
_devenv_project_path=$(realpath "${_devenv_path}")

# Setup the container name, default to the basename of the project path
if [ "" == "${_devenv_target}" ]; then
    _devenv_container_name=$(basename $_devenv_project_path)

else
    _devenv_container_name=${_devenv_target}

    # If the environment name is specified and it is running, override the
    # project path with the label from the container
    if [ "false" != "$(_devenv_is_running ${_devenv_container_name})" ]; then
        _devenv_project_path=$(_devenv_get_path_from_container ${_devenv_container_name})
    fi
fi

# Flag noting whether the environment specified by _devenv_container_name exists
_devenv_target_exists='false'
if [ "" != "$(_devenv_list_environments | grep '^${_devenv_container_name}')" ]; then
    _devenv_target_exists='true'
fi

# Default command
if [ "" == "${_devenv_command}" ]; then
    _devenv_command='attach'
fi

##############################################################################
# Execute
##############################################################################

# Attach to a running container
if [ "attach" == "${_devenv_command}" ]; then
    if [ "false" == "$(_devenv_is_running ${_devenv_container_name})" ]; then
        _devenv_create_container ${_devenv_container_name} ${_devenv_project_path}
    fi
    if [ "true" == "$(_devenv_is_paused ${_devenv_container_name})" ]; then
        _devenv_unpause_container ${_devenv_container_name}
    fi
    _devenv_attach ${_devenv_container_name}
    if [ "true" != "${_devenv_continue}" ]; then
        _devenv_pause_container ${_devenv_container_name}
    fi


# Create and start a new container
elif [ "init" == "${_devenv_command}" ]; then
    if [ "true" == "${_devenv_target_exists}" ] && [ "false" == "$(_devenv_is_running ${_devenv_container_name})" ]; then
        _devenv_error_target_exists_stopped
    elif [ "true" == "$(_devenv_is_running ${_devenv_container_name})" ]; then
        _devenv_error_target_exists_running
    fi
    _devenv_create_container ${_devenv_container_name} ${_devenv_project_path}


# Kill a running container
elif [ "kill" == "${_devenv_command}" ]; then
    _devenv_kill_container ${_devenv_container_name}


# List current containers
elif [ "ls" == "${_devenv_command}" ]; then
    _devenv_list_environments ${_devenv_secondary_command}


# Refresh the specified container
elif [ "refresh" == "${_devenv_command}" ] || [ "restart" == "${_devenv_command}" ]; then
    if [ "false" == "$(_devenv_is_running ${_devenv_container_name})" ]; then
        _devenv_error_target_not_running ${_devenv_container_name}
    fi
    _devenv_kill_container ${_devenv_container_name}
    _devenv_create_container ${_devenv_container_name} ${_devenv_project_path}
    _devenv_attach ${_devenv_container_name}
    if [ "true" != "${_devenv_continue}" ]; then
        _devenv_pause_container ${_devenv_container_name}
    fi


# Rename a current container
elif [ "rename" == "${_devenv_command}" ]; then
    if [ "" == "${_devenv_secondary_command}" ]; then
        _devenv_error_new_name_not_specified
    fi
    if [ "false" == "${_devenv_target_exists})" ]; then
        _devenv_error_target_does_not_exist
    fi
    _devenv_rename_container ${_devenv_container_name} ${_devenv_secondary_command}


# Update to the latest image
# @todo Update this script from github too...
elif [ "self-update" == "${_devenv_command}" ]; then
    _devenv_self_update


# Unpause a paused container
elif [ "start" == "${_devenv_command}" ]; then
    _devenv_unpause_container ${_devenv_container_name}
    _devenv_attach ${_devenv_container_name}
    if [ "true" != "${_devenv_continue}" ]; then
        _devenv_pause_container ${_devenv_container_name}
    fi


# Pause a running container
elif [ "stop" == "${_devenv_command}" ]; then
    _devenv_pause_container ${_devenv_container_name}


# Unknown command
else
    echo " Unknown command '${_devenv_command}'"
    echo ""
    _devenv_show_usage
fi

exit 0
