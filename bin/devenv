#!/bin/bash

OPTIND=1

show_help=0
restart=0
stop=0
attach=0
container_name=""

while getopts ":ha:n:r:s:" opt 2>/dev/null; do
	case "$opt" in
    \?)
        echo "Invalid option '${OPTARG}'"
        exit 1
        ;;
    :)
        echo "Option '-${OPTARG}' requires an argument"
        exit 1
        ;;
	h)
		show_help=1
		shift
		;;
	a)  attach=1
		container_name=$OPTARG
		shift
		shift
		;;
	n)  container_name=$OPTARG
		shift
		shift
		;;
	r)  restart=1
		container_name=$OPTARG
		shift
		shift
		;;
	s)  stop=1
		container_name=$OPTARG
		shift
		shift
		;;
	esac
done

#echo "args: ${1}|${2}|${3}"

#
# Project path and container name
#
if [ "" == "${1}" ]; then
	project_path=$(realpath ".")
else
	project_path=$(realpath "${1}")
fi

if [ "" == "${container_name}" ]; then
	container_name=dev-$(basename $project_path)
fi

#
# Container state
#
running=$(docker inspect --format="{{ .State.Running }}" ${container_name} 2> /dev/null)
if [ $? -eq 1 ]; then
	running='false'
fi
ghost=$(docker inspect --format="{{ .State.Ghost }}" ${container_name} 2> /dev/null)
paused=$(docker inspect --format="{{ .State.Paused }}" ${container_name} 2> /dev/null)
exited=$(docker ps -a -f "status=exited" | grep "${container_name}")

#
# Do anyany necessary cleanup
#
if [ "" != "${exited}" ]; then
	docker rm $container_name
	running='false'
fi
if [ "true" == "${ghost}" ]; then
	docker kill $container_name
	docker rm   $container_name
	running='false'
fi
if [ "true" == "${paused}" ]; then
	docker start $container_name
	running='true'
fi

#
# Help screen
#
function show_help {
	echo
	echo "devenv [OPTIONS] [PATH]"
	echo
	echo "    If path is omitted, the current directory is assumed"
	echo
	echo "Options:"
	echo
	echo "    -h    Show help"
	echo
	echo "    -a CONTAINER_NAME"
	echo "          Attach to the specified container"
	echo
	echo "    -n CONTAINER_NAME"
	echo "          Name the dev container when creating a new instance"
	echo
	echo "    -s CONTAINER_NAME"
	echo "          Stop the specified container'"
	echo
	echo "    -r CONTAINER_NAME"
	echo "          Restart the specified container"
	echo
}

#
# Stop a dev container
#
function stop_container {
	if [ "true" == $running ]; then
		echo "Stopping '$1'..."
		docker stop $1 > /dev/null
		echo "Removing '$1'..."
		docker rm $1 > /dev/null
	else
		echo "Container '$1' is not running"
	fi
	running='false'
}

#
# Start a dev container
#
function start_container {
	if [ "true" == $running ]; then
		echo "Container '${1}' is already running"
	else
		echo "Starting dev container '${1}' at ${2}..."
		local host_name=$(basename $2)
		docker run \
			-itd \
			-h ${host_name} \
			-e HOSTNAME=${host_name} \
			--add-host ${host_name}:127.0.0.1 \
			-e TERM=$TERM \
			-v ${2}:/project:rw \
			-v /var/run/docker.sock:/var/run/docker.sock \
			-v ~/:/home/dev:rw \
			--name ${1} \
			mkenney/devenv
	fi
}

if [ 1 == $show_help ]; then
	show_help
	exit 0;
fi

if [ 1 == $stop ]; then
	stop_container $container_name
	exit 0
fi

if [ 1 == $attach ]; then
    if ["true" != "${running}" ]; then
        echo "The container '${container_name}' is not running"
        exit 1
    fi
fi

if [ 1 == $restart ]; then
	stop_container $container_name
fi

if [ "true" != "${running}" ]; then
	start_container $container_name $project_path
fi

docker exec -ti $container_name script /dev/null -c 'sh /init-env.sh'
